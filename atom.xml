<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stackess</title>
  <subtitle>在互联网世界做只小透明</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.stackess.com/"/>
  <updated>2016-04-08T17:09:49.554Z</updated>
  <id>http://www.stackess.com/</id>
  
  <author>
    <name>cstackess</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法导论笔记：渐近大于和多项式大于</title>
    <link href="http://www.stackess.com/intro2algr_1/"/>
    <id>http://www.stackess.com/intro2algr_1/</id>
    <published>2016-02-18T15:31:00.000Z</published>
    <updated>2016-04-08T17:09:49.554Z</updated>
    
    <content type="html">&lt;p&gt;在《算法导论》的第四章中用主方法求解递归式，没有说清渐近大于（小于）和多项式大于（小于）的概念，尤其是针对case 3举的例子令我困惑，在查阅了多种解释后，经验证并整理如下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;渐近大于（asymptotically-larger）&quot;&gt;&lt;a href=&quot;#渐近大于（asymptotically-larger）&quot; class=&quot;headerlink&quot; title=&quot;渐近大于（asymptotically larger）&quot;&gt;&lt;/a&gt;渐近大于（asymptotically larger）&lt;/h2&gt;&lt;p&gt;$f(n)$ 渐近大于 $g(n)$，记作 $f(n) = \omega(g(n))$：&lt;br&gt;$$&lt;br&gt;\lim_{n \rightarrow \infty} \frac{f(n)}{g(n)} = \infty&lt;br&gt;$$&lt;br&gt;注意都是非渐近紧缺的界。&lt;/p&gt;
&lt;h2 id=&quot;多项式大于（polynomially-larger）&quot;&gt;&lt;a href=&quot;#多项式大于（polynomially-larger）&quot; class=&quot;headerlink&quot; title=&quot;多项式大于（polynomially larger）&quot;&gt;&lt;/a&gt;多项式大于（polynomially larger）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;f(n) is polynomially bigger than g(n) when f(n) asymptotically dominates g(n) even after we multiply g(n) by a very small order polynomial (e.g., $n^{0.00001}$).&lt;br&gt;&lt;a href=&quot;https://inst.eecs.berkeley.edu/~cs170/fa07/handouts/cs170dis3.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$f(n)$ 多项式大于 $g(n)$：&lt;br&gt;$$&lt;br&gt;存在常数 \epsilon&amp;gt;0，使得 f(n)= \Omega(g(n)n^\epsilon)，即\lim_{n \rightarrow \infty}\frac{f(n)}{g(n)n^\epsilon} = \infty&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$n\log_2n$ 只渐近大于 n，因为虽然 $ \lim_{n \rightarrow \infty} \frac{n\log_2n}{n} = \infty$，但对任意常数 $\epsilon&amp;gt;0$，$\lim_{n \rightarrow \infty} \frac{n\log_2n}{n^{1+\epsilon}} = 0$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$2n$ 非渐近大于 $n$，因为 $\lim_{n \rightarrow \infty} \frac{2n}{n} = 2$，即实际上$2n=O(n)$，$n$是渐近紧确的界。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$n\log_2n$ 多项式大于 $n^{\log_4 3}$，因为存在常数$\epsilon=0.2$，$\log_4 3+\epsilon = 0.99$，则$\lim_{n \rightarrow \infty} \frac{n\log_2n}{n^{\log_4 3+\epsilon}} = \infty$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$n^2$ 多项式大于 $n\log_2 n$，因为存在常数$\epsilon=0.9$，则$\lim_{n \rightarrow \infty} \frac{n^2}{n^{1+\epsilon} \log_2 n} = \infty$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;同理&lt;/p&gt;
&lt;h2 id=&quot;渐近小于（asymptotically-smaller）&quot;&gt;&lt;a href=&quot;#渐近小于（asymptotically-smaller）&quot; class=&quot;headerlink&quot; title=&quot;渐近小于（asymptotically smaller）&quot;&gt;&lt;/a&gt;渐近小于（asymptotically smaller）&lt;/h2&gt;&lt;p&gt;$f(n)$ 渐近小于 $g(n)$，也记作 $f(n) = o(g(n))$：&lt;br&gt;$$&lt;br&gt;\lim_{n \rightarrow \infty} \frac{f(n)}{g(n)} = 0&lt;br&gt;$$&lt;/p&gt;
&lt;h2 id=&quot;多项式小于（polynomially-smaller）&quot;&gt;&lt;a href=&quot;#多项式小于（polynomially-smaller）&quot; class=&quot;headerlink&quot; title=&quot;多项式小于（polynomially smaller）&quot;&gt;&lt;/a&gt;多项式小于（polynomially smaller）&lt;/h2&gt;&lt;p&gt;$f(n)$ 多项式小于 $g(n)$&lt;br&gt;$$存在常数 \epsilon&amp;gt;0，使得 f(n) = O(g(n)n^ \epsilon)，即\lim_{n \rightarrow \infty}\frac{f(n)}{g(n)n^ \epsilon} = 0&lt;br&gt;$$&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在《算法导论》的第四章中用主方法求解递归式，没有说清渐近大于（小于）和多项式大于（小于）的概念，尤其是针对case 3举的例子令我困惑，在查阅了多种解释后，经验证并整理如下。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.stackess.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法导论" scheme="http://www.stackess.com/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ Ideal 快捷键</title>
    <link href="http://www.stackess.com/intelliJ_Ideal/"/>
    <id>http://www.stackess.com/intelliJ_Ideal/</id>
    <published>2016-02-02T08:31:00.000Z</published>
    <updated>2016-04-08T16:14:52.601Z</updated>
    
    <content type="html">&lt;p&gt;最近看了&lt;a href=&quot;http://www.bilibili.com/video/av3626221/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;「Live Coding」TDD Hangman in Java&lt;/a&gt;觉得用IntelliJ Ideal很酷，以下是按照个人喜好的总结。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;选择、编辑&quot;&gt;&lt;a href=&quot;#选择、编辑&quot; class=&quot;headerlink&quot; title=&quot;选择、编辑&quot;&gt;&lt;/a&gt;选择、编辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Y&lt;/code&gt; 删除行 (★)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + delete&lt;/code&gt; 删除光标后面的单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + backspace&lt;/code&gt; 删除光标前面的单词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + W&lt;/code&gt; 选中光标所在的单词 ，连续按会有其他效果 （相反的是Ctrl + Shift + W） (★)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + ← 或 →&lt;/code&gt; 光标跳到上/下个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + ↑ 或 ↓&lt;/code&gt; 相当于你用鼠标滑滚轮(为了方便鼠标党)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + home 或 end&lt;/code&gt; 跳到文件头文件尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + [ 或 ]&lt;/code&gt; 移动光标到块的初/末括号地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl ＋ Shift ＋ backspace&lt;/code&gt;可以跳转到上次编辑的地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ALT+ ↑ 或 ↓&lt;/code&gt; 在方法间快速移动定位  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Enter&lt;/code&gt; 光标所在行下空出一行，光标不动&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + Enter&lt;/code&gt; 光标所在行下空出一行，光标定位到新行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + Enter&lt;/code&gt; 光标所在行上空出一行，光标定位到新行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + Enter&lt;/code&gt; 在末尾自动增加“;”完成当前语句 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + /&lt;/code&gt; 或 &lt;code&gt;Ctrl + Shift + /&lt;/code&gt; 注释（// 或者/&lt;em&gt;…&lt;/em&gt;/ ）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + L&lt;/code&gt; 代码格式化  (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + V&lt;/code&gt; 从剪贴板缓存中选择信息粘帖 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift + Alt + Insert&lt;/code&gt;  竖编辑模式  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;F2&lt;/code&gt; 跳转到下一个高亮错误 或 警告位置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + F2&lt;/code&gt;上一个错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + F3&lt;/code&gt; 调转到所选中的词的下一个同名位置&lt;ul&gt;
&lt;li&gt;后按&lt;code&gt;F3&lt;/code&gt; 向下查找关键字出现位置  &lt;/li&gt;
&lt;li&gt;后按&lt;code&gt;Shift + F3&lt;/code&gt; 向上查找关键字出现位置 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F4&lt;/code&gt; 查找变量、方法来源  &lt;h2 id=&quot;智能&quot;&gt;&lt;a href=&quot;#智能&quot; class=&quot;headerlink&quot; title=&quot;智能&quot;&gt;&lt;/a&gt;智能&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + 空格&lt;/code&gt; 基础代码完成（类名、方法名、变量名） (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + Enter&lt;/code&gt; 显示可能的动作和快速修复的方法供选择  (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Q&lt;/code&gt; 显示文档内容鼠标（类似的功能还有一个&lt;code&gt;Ctrl + Shift + I&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ctrl + B&lt;/code&gt; 快速打开光标处的类或方法（对于前端支持很好,比如可以直接通过class的name定位到css的文件位置），等同于&lt;code&gt;Ctrl + 光标指向&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ctrl + F1&lt;/code&gt; 显示错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ctrl + F9&lt;/code&gt; 编译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Alt + Shift + I&lt;/code&gt; Inspection result&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ctrl + K&lt;/code&gt; VCS提交项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + T&lt;/code&gt; VCS更新项目&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;动态模板&quot;&gt;&lt;a href=&quot;#动态模板&quot; class=&quot;headerlink&quot; title=&quot;动态模板&quot;&gt;&lt;/a&gt;动态模板&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + J&lt;/code&gt; 插入动态模板 (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tab&lt;/code&gt; 输入动态模板缩写后，按下 (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + J&lt;/code&gt; 对当前行或选中的代码，弹出动态模板窗口，作为模板变量加入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + N&lt;/code&gt; 查找类 (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + F&lt;/code&gt; 当前代码（文件）中查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + R&lt;/code&gt; 替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + N&lt;/code&gt;    通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + F1&lt;/code&gt; 查找代码所在位置 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift + Shift&lt;/code&gt; 弹出 Search Everywhere 弹出层 (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + A&lt;/code&gt; 可以查找所有IntelliJ的命令，并且每个命令后面还有其快捷键。所以它不仅是一大神键，也是查找学习快捷键的工具。 &lt;h2 id=&quot;窗口&quot;&gt;&lt;a href=&quot;#窗口&quot; class=&quot;headerlink&quot; title=&quot;窗口&quot;&gt;&lt;/a&gt;窗口&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Tab&lt;/code&gt; 编辑窗口切换 (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + E&lt;/code&gt; 最近打开的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + H&lt;/code&gt; 显示类层次图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + H&lt;/code&gt; 方法层次结构&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + H&lt;/code&gt; 调用层次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + F7&lt;/code&gt; 查找调用处 (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + 1,2,3...9&lt;/code&gt; 显示对应数值的选项卡&lt;ul&gt;
&lt;li&gt;1 是 Project 用得最多&lt;/li&gt;
&lt;li&gt;7 显示当前文件的结构，类似 &lt;code&gt;Ctrl + F12&lt;/code&gt;， 当前编辑的文件中快速导航(可以直接键入字母，IntelliJ IDEA会筛选你输入的来匹配对应是否有的方法，来快速定位)(类似结构图)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + F12&lt;/code&gt; 编辑器最大化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;重构&quot;&gt;&lt;a href=&quot;#重构&quot; class=&quot;headerlink&quot; title=&quot;重构&quot;&gt;&lt;/a&gt;重构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + F6&lt;/code&gt; 重命名(包、类、方法、变量、甚至注释等)  (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + O&lt;/code&gt; 选择可覆盖/继承的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + I&lt;/code&gt; 选择可实现的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + V&lt;/code&gt; 提取局部变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + F&lt;/code&gt; 提取实例变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + C&lt;/code&gt; 提取常量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + P&lt;/code&gt; 提取方法入参&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + Insert&lt;/code&gt; 生成(如代码GET,SET方法,构造函数，如类、包)   (★)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + Shift + T&lt;/code&gt; 弹出重构菜单（据说很牛叉）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;书签&quot;&gt;&lt;a href=&quot;#书签&quot; class=&quot;headerlink&quot; title=&quot;书签&quot;&gt;&lt;/a&gt;书签&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + 1,2,3,4....&lt;/code&gt; 添加书签，或者&lt;code&gt;Ctrl + F11&lt;/code&gt; 弹出一个小框来指定式添加书签(可以对文件或文件夹起作用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + 1,2,3,4....&lt;/code&gt; 快速定位到书签代码处&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F11&lt;/code&gt; 增加书签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shilft+F11&lt;/code&gt; 查看书签&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h2&gt;&lt;p&gt;ing…&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/dyyweb/blog/494504&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Idea 常用快捷键 列表(实战终极总结！！！！)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://note.youdao.com/share/web/file.html?id=973d61880d78c34797a978afc5bc8846&amp;amp;type=note&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IntelliJ IDEA快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/judasn/IntelliJ-IDEA-Tutorial/blob/master/keymap-introduce.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IntelliJ IDEA 常用快捷键讲解（Win+Linux）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/help/eclipse.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Migrating From Eclipse to IntelliJ IDEA&lt;/a&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/help/eclipse.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jetbrains.com/idea/help/eclipse.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了&lt;a href=&quot;http://www.bilibili.com/video/av3626221/&quot;&gt;「Live Coding」TDD Hangman in Java&lt;/a&gt;觉得用IntelliJ Ideal很酷，以下是按照个人喜好的总结。&lt;br&gt;
    
    </summary>
    
      <category term="工具配置" scheme="http://www.stackess.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Java" scheme="http://www.stackess.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell 笔记</title>
    <link href="http://www.stackess.com/linux_shell/"/>
    <id>http://www.stackess.com/linux_shell/</id>
    <published>2015-12-11T09:26:00.000Z</published>
    <updated>2016-04-08T17:07:11.398Z</updated>
    
    <content type="html">&lt;p&gt;Linux Shell分类，各项配置，输出重定向，常用命令mutt、chmod、nohup、crontab等。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-Shell分类&quot;&gt;&lt;a href=&quot;#1-Shell分类&quot; class=&quot;headerlink&quot; title=&quot;1 Shell分类&quot;&gt;&lt;/a&gt;1 Shell分类&lt;/h2&gt;&lt;h3 id=&quot;1-1-按是否交互式&quot;&gt;&lt;a href=&quot;#1-1-按是否交互式&quot; class=&quot;headerlink&quot; title=&quot;1.1 按是否交互式&quot;&gt;&lt;/a&gt;1.1 按是否交互式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;非交互式shell&lt;/strong&gt;&lt;br&gt;定义：为运行一个shell脚本启动的shell。&lt;br&gt;bash启动时执行的startup文件：由环境变量BASH_ENV来决定&lt;br&gt;&lt;strong&gt;交互式shell&lt;/strong&gt;&lt;br&gt;定义：工作方式是交互式的，等用户输入，然后执行，再等用户输入。&lt;/p&gt;
&lt;h3 id=&quot;1-2-按是否登录式&quot;&gt;&lt;a href=&quot;#1-2-按是否登录式&quot; class=&quot;headerlink&quot; title=&quot;1.2 按是否登录式&quot;&gt;&lt;/a&gt;1.2 按是否登录式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;非登录shell&lt;/strong&gt;&lt;br&gt;定义：不需要输入用户名和密码即可打开的Shell，例如：直接命令“bash”就是打开一个新的非登录shell，在Gnome或KDE中打开一个“终端”（terminal）窗口程序也是一个非登录shell。&lt;br&gt;bash启动时执行的startup文件：仅为~/.bashrc&lt;br&gt;&lt;strong&gt;登录shell&lt;/strong&gt;&lt;br&gt;定义：需要用户名、密码登录后才能进入的shell（或者通过”–login”选项生成的shell）&lt;/p&gt;
&lt;p&gt;bash启动时执行的startup文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/profile&lt;/li&gt;
&lt;li&gt;~/.bash_profile，~/.bash_login or ~/.profile, first existing readable file is read&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，作为登陆shell时bash并不读取~/.bashrc，但是在文件~/.bash_profile中通常都会读取~/.bashrc。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://smilejay.com/2012/10/interactive-shell-login-shell/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://smilejay.com/2012/10/interactive-shell-login-shell/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/cute/archive/2011/03/17/1987278.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/cute/archive/2011/03/17/1987278.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-14735472-id-3190130.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.chinaunix.net/uid-14735472-id-3190130.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-Linux配置&quot;&gt;&lt;a href=&quot;#2-Linux配置&quot; class=&quot;headerlink&quot; title=&quot;2 Linux配置&quot;&gt;&lt;/a&gt;2 Linux配置&lt;/h2&gt;&lt;h3 id=&quot;2-1-bash-profile&quot;&gt;&lt;a href=&quot;#2-1-bash-profile&quot; class=&quot;headerlink&quot; title=&quot;2.1 .bash_profile&quot;&gt;&lt;/a&gt;2.1 .bash_profile&lt;/h3&gt;&lt;p&gt;跟/etc/profile不同的是，.bash_profile的配置只影响单个用户，不对其它用户产生影响。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# .bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Get the aliases and functions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ -f ~/.bashrc ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	. ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# User specific environment and startup programs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PTAH=$PATH:/data/work/cstackess/bin:$HOME/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-2-bashrc&quot;&gt;&lt;a href=&quot;#2-2-bashrc&quot; class=&quot;headerlink&quot; title=&quot;2.2 .bashrc&quot;&gt;&lt;/a&gt;2.2 .bashrc&lt;/h3&gt;&lt;p&gt;启动一个bash时直接source ~/.bashrc, 而这~/.bashrc里面会source /etc/bashrc等&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# .bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Source global definitions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ -f /etc/bashrc ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        . /etc/bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ -f /etc/profile ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	. /etc/profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# User specific aliases and functions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PS1=&amp;apos;\[\033[0;32m\]\A \[\033[0;31m\]\u\[\033[0;34m\]@\[\033[0;35m\]\h\[\033[0;34m\]:\[\033[00;36m\]\w\[\033[0;33m\] \$\[\033[0m\] &amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias ll=&amp;apos;ls -lht --color=auto&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# -h 人力可读的文件大小，配合-l使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# -t 按修改时间排序&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置参考：&lt;a href=&quot;http://www.360doc.com/content/11/0103/05/3688062_83518447.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.360doc.com/content/11/0103/05/3688062_83518447.shtml&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-其他配置&quot;&gt;&lt;a href=&quot;#3-其他配置&quot; class=&quot;headerlink&quot; title=&quot;3 其他配置&quot;&gt;&lt;/a&gt;3 其他配置&lt;/h2&gt;&lt;h3 id=&quot;3-1-hiverc&quot;&gt;&lt;a href=&quot;#3-1-hiverc&quot; class=&quot;headerlink&quot; title=&quot;3.1 .hiverc&quot;&gt;&lt;/a&gt;3.1 .hiverc&lt;/h3&gt;&lt;p&gt;显示当前数据库名，使用test数据库。另外 SET hive.cli.print.header=fasle 可隐藏表头&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; hive.cli.print.current.db=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-2-vimrc&quot;&gt;&lt;a href=&quot;#3-2-vimrc&quot; class=&quot;headerlink&quot; title=&quot;3.2 .vimrc&quot;&gt;&lt;/a&gt;3.2 .vimrc&lt;/h3&gt;&lt;p&gt;字自动语法高亮，显示行标&lt;br&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;syntax&lt;/span&gt; enable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;nu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-3-muttrc&quot;&gt;&lt;a href=&quot;#3-3-muttrc&quot; class=&quot;headerlink&quot; title=&quot;3.3 .muttrc&quot;&gt;&lt;/a&gt;3.3 .muttrc&lt;/h3&gt;&lt;p&gt;邮件设置等&lt;br&gt;&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; charset=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;rfc2047_parameters=yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;envelope_from=yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;use_from=yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;from=my@domain.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;realname=&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&quot;某某&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;4-Linux命令&quot;&gt;&lt;a href=&quot;#4-Linux命令&quot; class=&quot;headerlink&quot; title=&quot;4 Linux命令&quot;&gt;&lt;/a&gt;4 Linux命令&lt;/h2&gt;&lt;h3 id=&quot;4-1-mutt&quot;&gt;&lt;a href=&quot;#4-1-mutt&quot; class=&quot;headerlink&quot; title=&quot;4.1 mutt&quot;&gt;&lt;/a&gt;4.1 mutt&lt;/h3&gt;&lt;p&gt;例如&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hi,\n\t×××的需求已完成，如有问题，请联系我。谢谢。&quot;&lt;/span&gt; | mutt  name@domain.com &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;×××需求完成&quot;&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; test.txt -b my@domain.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决附件太大问题&lt;/strong&gt;：&lt;a href=&quot;http://crazyof.me/blog/archives/540.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://crazyof.me/blog/archives/540.html&lt;/a&gt;&lt;br&gt;已知如下限制，但需权限修改&lt;br&gt;mailbox_size_limit = 51200000&lt;br&gt;message_size_limit = 30720000  （29.296875mb）&lt;/p&gt;
&lt;p&gt;另可&lt;strong&gt;分卷&lt;/strong&gt;：&lt;code&gt;zip -s 5m text.zip --out final&lt;/code&gt;    &lt;/p&gt;
&lt;h3 id=&quot;4-2-chmod&quot;&gt;&lt;a href=&quot;#4-2-chmod&quot; class=&quot;headerlink&quot; title=&quot;4.2 chmod&quot;&gt;&lt;/a&gt;4.2 chmod&lt;/h3&gt;&lt;p&gt;修改linux文件权限命令：chmod 777    &lt;/p&gt;
&lt;h3 id=&quot;4-3-输出重定向&quot;&gt;&lt;a href=&quot;#4-3-输出重定向&quot; class=&quot;headerlink&quot; title=&quot;4.3 输出重定向&quot;&gt;&lt;/a&gt;4.3 输出重定向&lt;/h3&gt;&lt;p&gt;1 是标准输出，默认&lt;br&gt;2 是错误输出，否则立刻打印在console上&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# hive查询结果输出到text.txt，hive查询日志输出到text.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hive -e &amp;quot;select * from db limit 10&amp;quot; 1&amp;gt; text.txt 2&amp;gt; text.log &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# hive查询日志和查询结果都输出到text.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hive -e &amp;quot;select * from db limit 10&amp;quot; 1&amp;gt; text.out 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-4-nohup&quot;&gt;&lt;a href=&quot;#4-4-nohup&quot; class=&quot;headerlink&quot; title=&quot;4.4 nohup&quot;&gt;&lt;/a&gt;4.4 nohup&lt;/h3&gt;&lt;p&gt;忽略任何中断/挂起信号，使命令继续执行。&lt;/p&gt;
&lt;p&gt;语法：&lt;br&gt;&lt;code&gt;nohup Command [ Arg ... ] [　&amp;amp; ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;jobs&lt;/code&gt;查看任务。 　　&lt;br&gt;使用&lt;code&gt;fg %n&lt;/code&gt;关闭任务。&lt;br&gt;如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 nohup.out 文件中。&lt;br&gt;　&lt;br&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 不中断的后台运行，hive查询结果输出到text.txt，hive查询日志输出到text.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nohup hive -e &amp;quot;select * from db limit 10&amp;quot;  1&amp;gt; text.txt 2&amp;gt; text.log &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 不中断的后台运行，hive查询日志和查询结果都输出到text.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nohup hive -e &amp;quot;select * from db limit 10&amp;quot; 1&amp;gt; text.out 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.cnblogs.com/hnrainll/archive/2011/07/04/2097408.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/hnrainll/archive/2011/07/04/2097408.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-5-crontab&quot;&gt;&lt;a href=&quot;#4-5-crontab&quot; class=&quot;headerlink&quot; title=&quot;4.5 crontab&quot;&gt;&lt;/a&gt;4.5 crontab&lt;/h3&gt;&lt;p&gt;定时任务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;crontab  -e&lt;/code&gt; 编辑crontab服务文件&lt;br&gt;&lt;code&gt;crontab  -l&lt;/code&gt; 查看该用户下的crontab服务是否创建成功&lt;/p&gt;
&lt;p&gt;例如：每天10：30后台执行脚本，并把错误输出重定向&lt;br&gt;&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;30 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * * * sh /&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/work/my.sh &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt; /&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/work/text.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt; &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中my.sh因需要用到hive命令，且crontab执行环境的环境变量和shell执行环境变量不一样，因此需要source ~/.bashrc，使得调用到/etc/profile，将hive的path加入进来，并cd到相应目录下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /data/work&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hive -e &amp;quot;select * from db limit 10&amp;quot; &amp;gt; text.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;crontab 执行环境变量的问题&lt;/strong&gt;：  &lt;a href=&quot;http://my.oschina.net/chenzuoping/blog/185383&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/chenzuoping/blog/185383&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.blogjava.net/freeman1984/archive/2010/09/23/332715.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.blogjava.net/freeman1984/archive/2010/09/23/332715.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux Shell分类，各项配置，输出重定向，常用命令mutt、chmod、nohup、crontab等。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.stackess.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Linux" scheme="http://www.stackess.com/tags/Linux/"/>
    
      <category term="Shell" scheme="http://www.stackess.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode之Math</title>
    <link href="http://www.stackess.com/leetcode_math/"/>
    <id>http://www.stackess.com/leetcode_math/</id>
    <published>2015-10-11T13:51:00.000Z</published>
    <updated>2016-04-08T17:06:17.790Z</updated>
    
    <content type="html">&lt;p&gt;Leetcode之Math部分几题：258 Add Digits 各位求和，复杂度O(1)的就是有规律的，能推导出公式的；202 Happy Number 各位求平方和，终止条件会用上HashSet或Floyd（龟兔）判断状态循环；263 Ugly Number 主要涉及分解质约数；204 Count Primes 数素数个数，可巧用埃氏筛法的去除合数来优化。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;h2 id=&quot;258-Add-Digits&quot;&gt;&lt;a href=&quot;#258-Add-Digits&quot; class=&quot;headerlink&quot; title=&quot;258 Add Digits&quot;&gt;&lt;/a&gt;258 Add Digits&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-digits/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/add-digits/&lt;/a&gt;&lt;br&gt;标签： Math&lt;/p&gt;
&lt;p&gt;题目：把一个数的各位数求和，循环这个过程，直到结果只有一个数字，返回这个数字。例如38-&amp;gt;3+8=11-&amp;gt;1+1=2。&lt;/p&gt;
&lt;p&gt;容易想到的普通解法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addDigits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(num&amp;gt;=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num=cal(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(num&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x=num%&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num=num/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum=sum+x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个算法的效率至少也要$\Omega(n)$，$n$为数字的位数，而题目继续问 Could you do it without any loop/recursion in O(1) runtime?&lt;/p&gt;
&lt;p&gt;一般，复杂度$O(1)$的就是有规律的，能推导出公式的。如11-&amp;gt;2，12-&amp;gt;3，规律来了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实这是著名的&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_root&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数根&lt;/a&gt;，用途包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数根可以计算模运算的同余，对于非常大的数字的情况下可以节省很多时间。如38的数根是2，38%9=2%9=2。（在此想起了小学时老师教判断一个数是否可被3正除，可把该数各位求和，和若可被3正除，则该数为3倍数，这应该也正是来源于数根的原理？）&lt;/li&gt;
&lt;li&gt;数字根可作为一种检验计算正确性的方法。例如，两数字的和的数根等于两数字分别的数根的和。&lt;/li&gt;
&lt;li&gt;另外，数根也可以用来判断数字的整除性，&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/10/1447469339.png&quot; alt=&quot;2015-10-11_215801.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结一下，用$dr(n)$表示$n$的数根，则公式有：&lt;br&gt;$$&lt;br&gt;  dr(n) =&lt;br&gt;\begin{cases}&lt;br&gt;0,  &amp;amp; \text{if $n=0$} \\&lt;br&gt;9, &amp;amp; \text{if $n\neq 0$ and $n\equiv 0 \pmod 9$}\\&lt;br&gt;n\bmod 9, &amp;amp; \text{if $n\not\equiv 0 \pmod 9$}&lt;br&gt;\end{cases}&lt;br&gt;$$&lt;br&gt;其中 $n\equiv 0 \pmod 9$表示$n$和$0$对于模$9$同余，即$n\bmod 9=0\bmod 9=0$。则复杂度$O(1)$的算法代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addDigits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num%&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num%&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还可以继续归纳出&lt;br&gt;$$&lt;br&gt; \mbox{dr}(n) = 1\ +\ ((n-1)\ {\rm mod}\ 9)&lt;br&gt; $$&lt;br&gt; 以及&lt;br&gt; $$&lt;br&gt; dr(n)=n-9\left\lfloor\frac{n-1}{9}\right\rfloor.&lt;br&gt; $$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;202-Happy-Number&quot;&gt;&lt;a href=&quot;#202-Happy-Number&quot; class=&quot;headerlink&quot; title=&quot;202 Happy Number&quot;&gt;&lt;/a&gt;202 Happy Number&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/happy-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/happy-number/&lt;/a&gt;&lt;br&gt;标签：Math|HashTable&lt;/p&gt;
&lt;p&gt;题目：把一个数的各位数求平方和，循环这个过程，直到结果为1返回true或无限循环返回false。&lt;br&gt;要注意循环终止条件与&lt;code&gt;258 Add Digits&lt;/code&gt;不同，有两个终止条件。无限循环并不一定回到最初的数，注意挖掘循环的规则。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7-&amp;gt;49-&amp;gt;97-&amp;gt;130-&amp;gt;10-&amp;gt;1，返回true&lt;/li&gt;
&lt;li&gt;4-&amp;gt;16-&amp;gt;37-&amp;gt;58-&amp;gt;89-&amp;gt;145-&amp;gt;42-&amp;gt;20-&amp;gt;4，返回false&lt;/li&gt;
&lt;li&gt;2-&amp;gt;4-&amp;gt;…-&amp;gt;4，返回false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此循环过程需要用上HashTable的数据结构，存储经历过的数。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isHappy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Set set = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (set.contains(n)) &lt;span class=&quot;comment&quot;&gt;//如果set中已有某数，表示陷入无限循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				set.add(n);      &lt;span class=&quot;comment&quot;&gt;//否则，将数加入set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				n = cal(n);      &lt;span class=&quot;comment&quot;&gt;//求各位平方和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; squareSum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; yushu = num % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			num /= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			squareSum += yushu * yushu;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; squareSum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Discuss中还有一种得票最高的空间复杂度$O(1)$的算法用的是&lt;code&gt;Floyd判圈算法&lt;/code&gt;（Floyd Cycle detection），又称龟兔赛跑算法。&lt;/p&gt;
&lt;p&gt;Floyd判圈算法的应用包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于有限状态机与链表，可以判断从某个起点开始是否会返回到访问过运行过程中的某个状态和节点。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于迭代函数，可以判断其是否存在周期，以及求出其最小正周期。&lt;/p&gt;
&lt;p&gt;算法思想可以用龟兔赛跑的例子来解释，龟兔同时从$S$点出发，如果赛道有环，设环的长度为$l$，且环起始点为$C$，那么快的一方总能追上慢的一方，设相遇点为$P$。如果赛道没环，兔子将一路领先到达终点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以进一步推导，龟兔相遇时（乌龟一旦进入环后一圈内就会相遇）有&lt;br&gt;$$&lt;br&gt;\begin{cases}&lt;br&gt;S_t=|\vec{SC}|+n×l+|\vec{CP}|\\&lt;br&gt;S_g=|\vec{SC}|+m×l+|\vec{CP}|\\&lt;br&gt;S_t=2×S_g\&lt;br&gt;m=0&lt;br&gt;\end{cases}&lt;br&gt;$$&lt;br&gt;得到$S_g=n×l$，相遇时乌龟总路程，即是兔子多跑的路的长度是兔子跑圈的总长度。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;(1) 判断环的存在&lt;/strong&gt;&lt;br&gt;假设在一个单位时间内，兔子跑2格，乌龟跑1格（两步或多步效果是等价的，只要一个比另一个快就行），同时出发，如果两者在之后的某一点相遇了，那么说明链表有环，否则，如果兔子到达了链表的结尾，那么说明没环。&lt;br&gt;以下图为例：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/10/3850783611.png&quot; alt=&quot;判圈&quot;&gt;&lt;/p&gt;
&lt;p&gt; 因为乌龟进入环后，在一圈之内肯定与兔子相遇，因此时间复杂度$O(|\vec{SC}|+l)$。空间复杂度为$O(1)$，是常数空间的算法。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;(2) 求环的长度&lt;/strong&gt;&lt;br&gt;确定有环后，再让乌龟从$P$点开始跑一圈，还会返回$P$点，这一次的推进的步数就是环的长度。&lt;/p&gt;
&lt;p&gt;  注：既不需要求环起始点（已知环起始点，那从起始点跑一圈回来的长度就是环长度），也不需要龟兔第二次追击相遇（龟兔从环内出发的追击相遇，兔子比乌龟只会多一圈）。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;(3) 求环的起始点&lt;/strong&gt;&lt;br&gt;从上图看，$|\vec{SC}|=|\vec{PC}|$，这并不是巧合。&lt;br&gt;之前推导得到了$S_g=n×l$。式子$S_g+|\vec{PC}|$表示乌龟从$P$继续走到$C$。式子$S_g+|\vec{SC}|=n×l+|\vec{SC}|$表示乌龟从$P$点再走$|\vec{SC}|$，该式交换后$|\vec{SC}|+n×l$又可视为从$S$直接到$C$点后环绕几圈，即乌龟从$P$点再走$|\vec{SC}|$也是到$C$。因此有$|\vec{SC}|=|\vec{PC}|$。&lt;br&gt;综上，求环起始点的算法只要令乌龟、兔子分别从$P$、$S$点都1格1格地前进，相遇的地方即是环起始点$C$。&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/thestoryofsnow/article/details/6822576&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用Floyd判圈算法解此题的代码为：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isHappy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; slow, fast;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		slow = fast = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			slow = cal(slow);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fast = cal(cal(fast));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (slow != fast);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; slow == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; squareSum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; yushu = num % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			num /= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			squareSum += yushu * yushu;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; squareSum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;263-Ugly-Number&quot;&gt;&lt;a href=&quot;#263-Ugly-Number&quot; class=&quot;headerlink&quot; title=&quot;263 Ugly Number&quot;&gt;&lt;/a&gt;263 Ugly Number&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/ugly-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/ugly-number/&lt;/a&gt;&lt;br&gt;标签：Math&lt;/p&gt;
&lt;p&gt;如果一个数的质约数只有2、3和5，则返回true，否则返回false。如20为true，14为false。还要注意一些特殊值，如0为false，1为false。&lt;/p&gt;
&lt;p&gt;这题的核心原理是&lt;code&gt;分解质约数&lt;/code&gt;，方法是用短除法，从最小的质数除起，一直除到结果为质数为止。&lt;/p&gt;
&lt;p&gt;分解质因数算法思想是，将数num，除尽从2到num的约数，即除尽2，除尽3，除尽4，……，除尽num。除尽4其实无意义，因为先除尽2，但这有效地避免了检验4是否为质数的步骤。另外要注意质数的质约数含有它本身，因此是小于等于。&lt;br&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt; decomposePrimeFactors(&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt; list=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;//除尽i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			list.add(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; / i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对本题，可以求出所有质因数，再检查质约数是否只有2、3和5。也可以改造分解质约数的过程，在除尽2、3和5后，如果num为1，则不可能有其他质约数，否则还有其他质约数。代码如下&lt;a href=&quot;http://baike.baidu.com/view/832102.htm#2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isUgly&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;//避免陷入死循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			num = num / i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拓展：求两数的公约数、公倍数。&lt;a href=&quot;http://baike.baidu.com/link?url=_qRJabDJhgnnC0bgoyo2O40u3MyAF6NNQZ24irwdpq0QgT3VjrBgOjj3gNpCHRSJAp_b5gWzyRVrKn1lb4hNZa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;204-Count-Primes&quot;&gt;&lt;a href=&quot;#204-Count-Primes&quot; class=&quot;headerlink&quot; title=&quot;204 Count Primes&quot;&gt;&lt;/a&gt;204 Count Primes&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-primes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/count-primes/&lt;/a&gt;&lt;br&gt;标签：HashTable|Math&lt;/p&gt;
&lt;p&gt;题目：数出小于非负数n的素数个数并返回。例如，小于12的素数有2、3、5、7、11，共5个。&lt;/p&gt;
&lt;p&gt;容易想到的一种算法是用函数isPrime判断每一个小于n的数是否为素数。&lt;code&gt;isPrime(n)&lt;/code&gt;要考虑num是否满足“除了1和它本身外，不能被其他自然数整除”的素质性质。如果“其他自然数”要从$2$考虑到$n-1$，复杂度就是$O(n)$；进一步省去对称的乘式，就只需要从2考虑到$\sqrt{n}$，复杂度将为$O(n^{0.5})$。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i * i &amp;lt;= num; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;终止条件用的是&lt;code&gt;i * i &amp;lt;= num&lt;/code&gt;而不是&lt;code&gt;i &amp;lt;= sqrt(num)&lt;/code&gt;，可以比较有效加快速度。将isPrime用于判断每一个小于n的数，这种算法总的时间复杂度是$O(n^{1.5})$。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;埃拉托斯特尼筛法&lt;/code&gt;（sieve of Eratosthenes），一种更快的简单检定素数的算法。基本思想是筛除掉各个数的倍数，也就是合数，那剩下的就必然都是素数了。&lt;/p&gt;
&lt;p&gt;例如找出30以内的素数。先考虑2，倍数4、6、8、10、12等都不是素数，划去；考虑3，倍数有6、9、12等，划去；考虑4，倍数有8、12等……；考虑29，但倍数都大于30。最后剩下的未被划去的就是30以内的素数。&lt;/p&gt;
&lt;p&gt;代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; n; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt; &amp;lt; n; &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		primeArr[i * j] = false;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;空间复杂度$O(n)$，时间复杂度是$O(\frac{n}{2}-1+\frac{n}{3}-1+\ldots+\frac{n}{n-1}-1)$，化简得到$O\big(n(1+\frac{1}{2}+\frac{1}{3}+\ldots+\frac{1}{n-1})-2n+2\big)$，由欧拉公式得$O\big(n(\ln(n-1)+C)-2n+2\big)$，$C$是欧拉常数，化简后是$O(n\ln{n})$。&lt;/p&gt;
&lt;p&gt;进一步优化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2的3倍和3的2倍都是6，没有必要两次划去6。因此考虑数$x$时，$x×2,x×3$等可能都被划去，只需要划去倍数$x×x,x×(x+1)$等就可以了。&lt;/li&gt;
&lt;li&gt;4的倍数实际被2的倍数覆盖，且在考虑2时划去。因此被划去的数就直接跳过。&lt;/li&gt;
&lt;li&gt;由优化1产生的，对$x×x$大于30，无需考虑，此时剩下的未被划去的就是30以内的素数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/10/1978793782.png&quot; alt=&quot;数素数&quot;&gt;&lt;/p&gt;
&lt;p&gt;埃氏筛法的Java代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countPrimes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[] primeArr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Arrays.fill(primeArr, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i * i &amp;lt; n; i++)&amp;#123;         &lt;span class=&quot;comment&quot;&gt;//优化3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!primeArr[i]) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;//优化2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i; i * j &amp;lt; n; j++)      &lt;span class=&quot;comment&quot;&gt;//优化1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				primeArr[i * j] = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//数素数个数，也可以放到筛选过程中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt; n; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (primeArr[i]) count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优化后时间复杂度降到$O(n \ln \ln n)$。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Leetcode之Math部分几题：258 Add Digits 各位求和，复杂度O(1)的就是有规律的，能推导出公式的；202 Happy Number 各位求平方和，终止条件会用上HashSet或Floyd（龟兔）判断状态循环；263 Ugly Number 主要涉及分解质约数；204 Count Primes 数素数个数，可巧用埃氏筛法的去除合数来优化。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.stackess.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Leetcode" scheme="http://www.stackess.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>ShellED插件：Windows Eclipse支持Linux Shell</title>
    <link href="http://www.stackess.com/ShellED/"/>
    <id>http://www.stackess.com/ShellED/</id>
    <published>2015-10-10T11:34:00.000Z</published>
    <updated>2016-04-08T16:13:49.676Z</updated>
    
    <content type="html">&lt;p&gt;在Windows系统下，给Eclipse安装配置ShellED插件，支持Unix Shell脚本和grep、sed、awk工具的语法高亮、悬停显示帮助文档和执行。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以前提过用&lt;a href=&quot;https://www.cygwin.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cygwin&lt;/a&gt;可以满足在Windows下用很多Unix命令的需求。除此之外，&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Bash&lt;/a&gt;（想不到Git命令工具也顺带提供了不少工具）、&lt;a href=&quot;http://win-bash.sourceforge.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Win-Bash&lt;/a&gt;（只有exe的世界）等也是不错的选择。&lt;/p&gt;
&lt;p&gt;最近依然是在Windows下，想用Eclipse写Unix Shell脚本。踩了不少坑后，终于成功了，赶紧总结下！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我的实验环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 7 Operating System&lt;/li&gt;
&lt;li&gt;Eclipse Java Kepler SR2 Win32 x86 64bit (version 4.3.x)&lt;/li&gt;
&lt;li&gt;Cygwin 2.871（64bit）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装ShellED&quot;&gt;&lt;a href=&quot;#安装ShellED&quot; class=&quot;headerlink&quot; title=&quot;安装ShellED&quot;&gt;&lt;/a&gt;安装ShellED&lt;/h2&gt;&lt;p&gt;&lt;del&gt;墙内外不少提到ShellED安装的，都说要先用&lt;code&gt;http://download.eclipse.org/technology/Linuxtools/update&lt;/code&gt;安装man page viewer（顾名思义，用man命令查看帮助页面的），然后再装ShellED。但最新版的ShellED 2.0.3已经集成了man page viewer（在net.sourceforge.shelled-site-2.0.3.zip的plugins中已有org.eclipse.linuxtools.man.core_1.1.0.201306111610.jar），Eclipse对这种冲突会先卸了man page viewer再装ShellED。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;https://web.archive.org/web/20140517042401/http://sourceforge.net/apps/trac/shelled/wiki/Documentation/InstallGuide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方安装文档&lt;/a&gt;（藏得不是一般深……），有两种安装方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Using the update site&lt;/strong&gt;&lt;br&gt;Use the regular install method with the following update site link&lt;br&gt;&lt;code&gt;http://sourceforge.net/projects/shelled/files/shelled/update/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using zipped update site&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download net.sourceforge.shelled-site-2.0.3.zip&lt;/li&gt;
&lt;li&gt;Select Help &amp;gt; Install New Software…&lt;/li&gt;
&lt;li&gt;Now select the “Add” again, use the “Archive…” button to select the downloaded zip-file as source.&lt;/li&gt;
&lt;li&gt;Install ShellEd&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;两种我都试过，没有问题。&lt;del&gt;另外在ShellED的sourceforge页面看到说已并入Eclipse的DLKT项目，不知道是不是其中的TCL，不过那并不是我的所需。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置ShellED&quot;&gt;&lt;a href=&quot;#配置ShellED&quot; class=&quot;headerlink&quot; title=&quot;配置ShellED&quot;&gt;&lt;/a&gt;配置ShellED&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Man Pages 命令帮助&lt;/strong&gt;&lt;br&gt;  Window - Preferences - Man Pages 的 Man executable path 改为 &lt;code&gt;cygwin安装路径\bin\man.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shell Script 解释器&lt;/strong&gt;&lt;br&gt;  Window - Preferences - Shell Script - Interpreters 点 Add, 向 Interpreter executable 填入&lt;code&gt;cygwin安装路径\bin\bash.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File line delimiter 换行符&lt;/strong&gt;&lt;br&gt; Window - Preferences - General - Workspace 的 New text file line delimiter 选Other中的Unix，即新文本文件将用Unix的换行符&lt;/p&gt;
&lt;h2 id=&quot;配置其他Unix命令工具&quot;&gt;&lt;a href=&quot;#配置其他Unix命令工具&quot; class=&quot;headerlink&quot; title=&quot;配置其他Unix命令工具&quot;&gt;&lt;/a&gt;配置其他Unix命令工具&lt;/h2&gt;&lt;p&gt;配置完ShellED后，已经可以使用一般的Shell命令了，如if、for等。但实际更需要的是grep、sed、awk等强大的Unix工具。&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;cygwin安装路径\bin&lt;/code&gt;加到系统环境变量中，注意重启Eclipse，则Shell脚本就可以使用cygwin的其他Unix命令了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第一个Shell&quot;&gt;&lt;a href=&quot;#第一个Shell&quot; class=&quot;headerlink&quot; title=&quot;第一个Shell&quot;&gt;&lt;/a&gt;第一个Shell&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;新建Shell Script工程&lt;/strong&gt;&lt;br&gt;File - New - Other - Shell Script - Shell Script Project&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新建Shell Script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/10/531618470.png&quot; alt=&quot;shell.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;提供了语法高亮，悬停帮助文档等。直接点击Run，在Console中就是可以得到该脚本的执行结果。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;在Console中使用交互式Shell&quot;&gt;&lt;a href=&quot;#在Console中使用交互式Shell&quot; class=&quot;headerlink&quot; title=&quot;在Console中使用交互式Shell&quot;&gt;&lt;/a&gt;在Console中使用交互式Shell&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1562600/is-there-an-eclipse-plugin-to-run-system-shell-in-the-console&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverflow：Is there an Eclipse plugin to run system shell in the Console?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows Shell&lt;/strong&gt;&lt;br&gt;Run - External Tools - External Tools Configurations - 选中Program - New launch Configuration，Name填cmd，Location填&lt;code&gt;C:\Windows\System32\cmd.exe&lt;/code&gt;，Working Directory填&lt;code&gt;${workspace_loc:/项目名称}&lt;/code&gt;。点击Run cmd，进入交互式Windows Shell中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cygwin Shell&lt;/strong&gt;&lt;br&gt;同上的步骤，但不知Eclipse是有什么问题，会终止任务。&lt;br&gt;若用ShellED配参&lt;code&gt;-i&lt;/code&gt;，则提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bash: cannot set terminal process group (-1): Inappropriate ioctl for device&lt;br&gt;bash: no job control in this shell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;且终止任务。据悉Emacs配置Cygwin也有类似问题。&lt;/p&gt;
&lt;p&gt;若在launch Configuration的Arguments中填入脚本名如&lt;code&gt;ddd.sh&lt;/code&gt;，则点击Run cygwin就相当于用ShellED配置了解释器。&lt;/p&gt;
&lt;p&gt;这块内容可能涉及Cygwin或Eclipse问题，到此打住，暂时不做更多研究了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Windows系统下，给Eclipse安装配置ShellED插件，支持Unix Shell脚本和grep、sed、awk工具的语法高亮、悬停显示帮助文档和执行。&lt;/p&gt;
    
    </summary>
    
      <category term="工具配置" scheme="http://www.stackess.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux" scheme="http://www.stackess.com/tags/Linux/"/>
    
      <category term="Shell" scheme="http://www.stackess.com/tags/Shell/"/>
    
      <category term="Cygwin" scheme="http://www.stackess.com/tags/Cygwin/"/>
    
  </entry>
  
  <entry>
    <title>Java动态Web技术演化</title>
    <link href="http://www.stackess.com/java_web_history/"/>
    <id>http://www.stackess.com/java_web_history/</id>
    <published>2015-09-15T09:06:00.000Z</published>
    <updated>2016-04-08T17:04:52.517Z</updated>
    
    <content type="html">&lt;p&gt;Servlet的出现 -》 JSP的出现 -》 Model 1模型 -》 Model 2模型（MVC）-》 三层架构&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Servlet的出现&quot;&gt;&lt;a href=&quot;#Servlet的出现&quot; class=&quot;headerlink&quot; title=&quot;Servlet的出现&quot;&gt;&lt;/a&gt;Servlet的出现&lt;/h2&gt;&lt;p&gt;1996年Sun公司首次推出Servlet技术来解决Web程序当中的性能问题。&lt;br&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servlet在首次被用户请求的时候加载到内存当中，之后将一直驻留在内存里，对同一个servlet的后续请求将不用再对这个servlet的类进行实例化，这种机制大大提高了Web应用程序的&lt;strong&gt;响应速度&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在编写Servlet的时候要将所有HTML输出代码都封装在String对象里，然后再用out对象的print方法向用户展示出来，这增加了&lt;strong&gt;编码的难度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;维护起来十分麻烦，即使稍微一点点的改动也&lt;strong&gt;需要重新编译&lt;/strong&gt;Servlet才行。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JSP的出现&quot;&gt;&lt;a href=&quot;#JSP的出现&quot; class=&quot;headerlink&quot; title=&quot;JSP的出现&quot;&gt;&lt;/a&gt;JSP的出现&lt;/h2&gt;&lt;p&gt;Sun公司意识到了这个问题，并提出了JSP技术。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSP允许&lt;strong&gt;Java代码和HTML标签混杂&lt;/strong&gt;在一起以简化页面的开发。&lt;/li&gt;
&lt;li&gt;修改页面&lt;strong&gt;无需重新编译&lt;/strong&gt;，当第一次被请求的时候如果原先的JSP有变化则重新自动编译，如果没有变化则直接加载已经存在的实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java代码和HTML代码（逻辑和显示）混杂在一起使得程序变得&lt;strong&gt;难以阅读和维护&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;把代码放在JSP当中很&lt;strong&gt;难重用&lt;/strong&gt;，这与面向对象的思想是相悖的。&lt;/li&gt;
&lt;li&gt;JSP当中编写代码&lt;strong&gt;IDE&lt;/strong&gt;对此支持的并不是那么十分的出色。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试&lt;/strong&gt;变得困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Model-1模型&quot;&gt;&lt;a href=&quot;#Model-1模型&quot; class=&quot;headerlink&quot; title=&quot;Model 1模型&quot;&gt;&lt;/a&gt;Model 1模型&lt;/h2&gt;&lt;p&gt;Java语言开发Web应用的第一种设计模型&lt;code&gt;Model 1&lt;/code&gt;，只用JSP不使用Servlet，并且使用JavaBean、JSTL（JavaServer Pages Standard Tag Libraries，JSP标准标签库）等技术将业务逻辑代码封装，从而一定程度上把显示和业务分开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/09/822801478.jpg&quot; alt=&quot;20140826004648312.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现比较简单，适用于快速开发小规模、需求稳定的项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不利于大型项目的网页设计师和Web开发人员之间的劳动分工：开发人员既要参与页面的开发，又要参与业务逻辑的编码。&lt;/li&gt;
&lt;li&gt;维护困难，应对需求变化薄弱。比如，由于JSP页面之间的联系是通过链接完成的，一旦页面名字改变那么任何使用这个页面的其他页面都要更改，严重的违背了面向对象的思想。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Model-2模型（MVC）&quot;&gt;&lt;a href=&quot;#Model-2模型（MVC）&quot; class=&quot;headerlink&quot; title=&quot;Model 2模型（MVC）&quot;&gt;&lt;/a&gt;Model 2模型（MVC）&lt;/h2&gt;&lt;p&gt;为了分离控制，第二种设计模型出现了，称之为&lt;code&gt;Model 2&lt;/code&gt;，也MVC（Model-View-Controller，模型-视图-控制器）设计模式的另一个名字。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/09/1284969086.jpg&quot; alt=&quot;20140826004833181.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;按照Model 2模型开发的应用程序由三种主要部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controller层负责接收来自用户输入，调用业务逻辑，控制View部分做出相应的变化，由Servlet充当。&lt;/li&gt;
&lt;li&gt;Model层包含了业务逻辑与持久数据，由Java Bean充当。&lt;/li&gt;
&lt;li&gt;View层仅作信息显示，由JSP充当。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于引入了MVC模式，使Model 2具有组件化的特点。&lt;/li&gt;
&lt;li&gt;更适用于大规模应用的开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了应用开发的复杂程度，对开发人员的技术要求也提高了。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不太明白在写什么：&lt;br&gt;所有的页面都有一个共同的入口点，通常是用一个Servlet或者过滤器（其中Struts1用的是Servlet，而Struts2用的是过滤器）来充当控制器。每一个HTTP请求都必须定向到控制器，而潜在各个请求中的URI里的信息将告诉这个控制器需要调用哪些动作。控制器检查每个URI以决定应该调用哪些动作。它还将动作对象保存在一个可以从视图访问的地方，这样服务器端的值就可以显示在浏览器上了。最后控制器使用RequestDispatcher对象把请求传递给视图（即相应的JSP页面），再由JSP页面里的定义标签把动作对象的内容显示出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;三层架构&quot;&gt;&lt;a href=&quot;#三层架构&quot; class=&quot;headerlink&quot; title=&quot;三层架构&quot;&gt;&lt;/a&gt;三层架构&lt;/h2&gt;&lt;p&gt;Model 2模型“数据访问”与“业务逻辑”混到了Model层，这样导致两者之间耦合无法解除，也就意味着，无法对“数据访问”的逻辑进行抽象，所以“数据访问”逻辑的改变（比如更换数据库）必将引起“业务逻辑”的改变，而现实中“数据访问”逻辑又是很容易改变的地方，所以要将Model2模型的Model层继续分离，将“数据访问”的职责单独抽到一层“持久化逻辑”中。由此产生了经典的&lt;code&gt;三层架构&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/09/2534979182.jpg&quot; alt=&quot;20140826004838812.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;所谓三层指的是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/09/2471020984.jpg&quot; alt=&quot;20140826004844616.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;三层架构是一种较正规的开发模型。它对每个易改变的层进行抽象，从而从依赖于实现转到了依赖于抽象，从而可以更好的应对需求的变化。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2cto.com/kf/201301/180905.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从Servlet到JSP，从Model1到Model2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/wang379275614/article/details/38834731&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;几种网站开发模型- Model1、Model2、三层&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/koches/article/details/7654629&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jsp Model1和Jsp Model2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Servlet的出现 -》 JSP的出现 -》 Model 1模型 -》 Model 2模型（MVC）-》 三层架构&lt;/p&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.stackess.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.stackess.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring之IoC容器</title>
    <link href="http://www.stackess.com/Spring_IoC/"/>
    <id>http://www.stackess.com/Spring_IoC/</id>
    <published>2015-09-10T11:09:00.000Z</published>
    <updated>2016-04-08T17:04:17.813Z</updated>
    
    <content type="html">&lt;p&gt;RT，断断续续写……&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Spirng&quot;&gt;&lt;a href=&quot;#Spirng&quot; class=&quot;headerlink&quot; title=&quot;Spirng&quot;&gt;&lt;/a&gt;Spirng&lt;/h2&gt;&lt;p&gt;插件：&lt;a href=&quot;http://spring.io/tools/sts/all&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spring.io/tools/sts/all&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&quot;http://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;start.spring.io&lt;/a&gt; to generate a basic project or follow one of the &lt;a href=&quot;https://spring.io/guides&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“Getting Started” guides&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;日志：&lt;a href=&quot;http://blog.csdn.net/yycdaizi/article/details/8276265&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/yycdaizi/article/details/8276265&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;控制反转&quot;&gt;&lt;a href=&quot;#控制反转&quot; class=&quot;headerlink&quot; title=&quot;控制反转&quot;&gt;&lt;/a&gt;控制反转&lt;/h2&gt;&lt;p&gt;任何一个有实际意义的应用都是由两个或者更多的类组成，这些类相互之间进行协作来完成特定的业务逻辑。如果相互协作的对象（即它所依赖的对象）的引用要由每个对象自己负责管理，将会导致&lt;strong&gt;高度耦合&lt;/strong&gt;和&lt;strong&gt;难以测试&lt;/strong&gt;的代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;耦合具有两面性，一方面紧密耦合的代码难以测试、复用和理解，另一方面一定程度的耦合又是必须的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果从具体对象手中交出控制，即把对象的依赖关系交给负责协调系统各个对象的第三方组件管理，就可以解耦代码、提高可测试性——这就是控制反转（Inversion of Control ，IoC）。控制反转主要有两种方式来实现：一是依赖查找（Dependency Lookup或Service Locator），二是依赖注入（dependency injection，DI），将对象自己去“取”依赖的职责反转为框架或IoC容器主动向对象“给”依赖。在Spring中，使用的是依赖注入，即在创建对象时设定依赖，注入到它们的对象中去，具体指的是对象实例通过构造器参数、工厂方法参数、（由构造器或工厂方法得到对象后的）属性设置来获得依赖对象的过程。&lt;/p&gt;
&lt;p&gt; 通过下例来感受几种管理依赖关系的方式：&lt;br&gt;（1）原始的，Human的构造器中自行创建了Eyes接口的一种实现BigBlueEyes，这使得Human与BigBlueEyes紧耦合在了一起，极大地限制了Human。更为糟糕的是难以对Human编写单元测试，当Human的see()方法被调用时，无法测试BigBlueEyes的see()方法是否被调用。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Life&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Eyes eyes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		eyes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigBlueEyes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;see&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		eyes.see();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（2）通过依赖查找，Human一定程度上解耦了，然而与BigBlueEyes的关系过于隐式，需要通过文字来查找，而且依然不方便测试。此处化简了JNDI代码。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Life&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Eyes eyes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		eyes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServiceLocator().getService(&lt;span class=&quot;string&quot;&gt;&quot;BigBlueEyes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;see&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		eyes.see();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（3）用构造器注入的形式（依赖注入的方式还有 Interface注入和setter注入），我们在构造Human时才把Eyes作为构造器参数传入，Human也没有与任何特定的Eyes实现发生耦合，这个Human长了什么样的Eyes，要等到Eyes的某种实现被注入时才知道。通过依赖注入和面向接口，Human与Eyes变成松耦合的关系。在测试时，用mock对象框架可以方便地进行单元测试，验证Eyes的eye()方法是否只被调用了一次。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Life&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Eyes eyes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Eyes eyes)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.eyes = eyes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;see&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		eyes.see();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;——参考自&lt;a href=&quot;martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;和&lt;a href=&quot;blog.csdn.net/zhaoshi_368/article/details/6578310&quot;&gt;这篇&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Bean-概述&quot;&gt;&lt;a href=&quot;#Bean-概述&quot; class=&quot;headerlink&quot; title=&quot;Bean 概述&quot;&gt;&lt;/a&gt;Bean 概述&lt;/h2&gt;&lt;p&gt;在Spring中，由Spring IoC容器管理的对象称为&lt;code&gt;Bean&lt;/code&gt;。容器通过XML、Java annotations或者Java code形式的&lt;code&gt;configuration metadata&lt;/code&gt;来获得bean和它们之间的关系。&lt;/p&gt;
&lt;p&gt;以下都先以XML为例。先做一个简单的示例。&lt;/p&gt;
&lt;p&gt;在Maven的pom.xml中加入对log4j（log可以给我们提供很多的信息）和Spring的依赖。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.2.0.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加x/y/beans.xml，默认bean的singleton-scoped（一个容器只维护一个单例）和pre-instantiated（ApplicationContext容器初始化启动后立刻创建配置bean，并完成依赖注入）。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; x.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BasicConfigurator.configure();	&lt;span class=&quot;comment&quot;&gt;//配置log4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.getRootLogger().setLevel(Level.ALL);	&lt;span class=&quot;comment&quot;&gt;//最低级别，输出所有日志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ApplicationContext ctx=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span class=&quot;string&quot;&gt;&quot;x/y/beans.xml&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//应用上下文容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo foo= ctx.getBean(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, Foo.class);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行程序，正常，还可以看到一行行的log输出。&lt;/p&gt;
&lt;h3 id=&quot;Bean的命名&quot;&gt;&lt;a href=&quot;#Bean的命名&quot; class=&quot;headerlink&quot; title=&quot;Bean的命名&quot;&gt;&lt;/a&gt;Bean的命名&lt;/h3&gt;&lt;h3 id=&quot;Bean的创建方式&quot;&gt;&lt;a href=&quot;#Bean的创建方式&quot; class=&quot;headerlink&quot; title=&quot;Bean的创建方式&quot;&gt;&lt;/a&gt;Bean的创建方式&lt;/h3&gt;&lt;p&gt;（1） 构造器&lt;br&gt;这是最普遍的一种方式。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）静态工厂方法&lt;br&gt;有时候静态工厂方法是实例化对象的唯一方法。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;factory-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;createBar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Bar &lt;span class=&quot;title&quot;&gt;createBar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更常见的是GoF中的单例模式。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;factory-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;createInstance&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Foo foo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Foo &lt;span class=&quot;title&quot;&gt;createInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（3）非静态工厂方法&lt;br&gt;容器通过一个现有已实例化的bean的&lt;strong&gt;非静态&lt;/strong&gt;工厂方法创建一系列的产品，类似于抽象工厂方法设计模式。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;factory-bean&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;factory-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;createBar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;factory-bean&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;factory-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;createBaz&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Bar bar = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BarImpl();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Baz baz = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BazImpl();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Bar &lt;span class=&quot;title&quot;&gt;createBar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Baz &lt;span class=&quot;title&quot;&gt;createBaz&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; baz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意区别，class + factory-method 是用class的静态factory-method创建bean，而 factory-bean + factory-method 是用factory-bean的非静态factory-method创建bean，创建的bean都不一定与class、factory-bean同类。&lt;/p&gt;
&lt;p&gt;在Spring文档中，通过&lt;strong&gt;静态或非静态&lt;/strong&gt;工厂方法创建对象，由IoC容器配置管理的bean称为&lt;code&gt;factory bean&lt;/code&gt;。区别于Spring中的&lt;code&gt;FactoryBean&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FactoryBean&lt;/strong&gt; 专指实现了FactoryBean接口的bean，是一个能够产生或者修饰对象生成的工厂bean。通过定制自己的FactoryBean，可以用Java code代替冗长的XML更好地表示bean复杂的初始化过程。当调用应用上下文的getBean(…)方法时实际得到的是FactoryBean的产品，即调用了bean实现的FactoryBean接口提供的getObject(…)方法。IoC容器的初始化逻辑本身支持FactoryBean的插入，FactoryBean接口对于Spring框架来说有重要的地位，Spring自身就提供了50多个FactoryBean的实现，它们隐藏了一些复杂bean的实例化细节，给上层应用带来便利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Bean的依赖注入&quot;&gt;&lt;a href=&quot;#Bean的依赖注入&quot; class=&quot;headerlink&quot; title=&quot;Bean的依赖注入&quot;&gt;&lt;/a&gt;Bean的依赖注入&lt;/h2&gt;&lt;h3 id=&quot;Bean的装配方式&quot;&gt;&lt;a href=&quot;#Bean的装配方式&quot; class=&quot;headerlink&quot; title=&quot;Bean的装配方式&quot;&gt;&lt;/a&gt;Bean的装配方式&lt;/h3&gt;&lt;p&gt;（1）基于创建的依赖注入&lt;br&gt;用&amp;lt; constructor-arg &amp;gt;元素表示。在很多地方都叫做 Constructor-based dependency injection，未免令人容易误会，因为不只构造器，创建方式中的静态和非静态工厂方法当然也可以进行依赖注入。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Bar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--构造器--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;15&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Baz&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;  	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--内部bean--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;factory-method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;createInstance&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--工厂--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; 	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--引用bean--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Bar&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num, Baz baz)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Foo &lt;span class=&quot;title&quot;&gt;createInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bar bar)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Bar的构造参数num和baz在XML中默认按顺序匹配对应。另外还可以利用&amp;lt; constructor-arg &amp;gt;元素的type、index、name等属性显示地去匹配构造器、工厂方法所需的参数。&lt;/p&gt;
&lt;p&gt;（2）基于setter的依赖注入&lt;br&gt;用&amp;lt; property &amp;gt;元素表示。在调用构造器或静态工厂方法实例化bean后，容器使用setter方法完成依赖注入。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;num&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;15&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Bar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Bar bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setNum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num=num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bar bar)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bar=bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般，构造器用于注入必须的依赖，setter用于注入可选的依赖。另外，对setter方法声明@Required可令属性成为必选的。&lt;/p&gt;
&lt;h3 id=&quot;Bean的装配类型&quot;&gt;&lt;a href=&quot;#Bean的装配类型&quot; class=&quot;headerlink&quot; title=&quot;Bean的装配类型&quot;&gt;&lt;/a&gt;Bean的装配类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单值：由&amp;lt; property &amp;gt; and &amp;lt; constructor-arg &amp;gt;的value属性指定，再从文字String转换成bean中真正对应的类型。 还可以用内嵌的&amp;lt; value &amp;gt;元素替换value属性。有时候还可以作为java.util.Properties使用，与后面的集合&amp;lt; props &amp;gt;元素是等价的。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		jdbc.driver.className=com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		jdbc.url=jdbc:mysql://localhost:3306/mydb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt; idref &amp;gt;元素：获得bean的id值（一个字符串），而不是bean的实例。bean属性指定引用的bean的id，比直接用value属性的方式，容器会在部署时验证所引用的bean是否存在。注：&amp;lt; bean &amp;gt;元素的name属性可被视为bean的别称id，广义上也是id。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;引用bean，即&amp;lt; ref &amp;gt;元素：&amp;lt; property &amp;gt; and &amp;lt; constructor-arg &amp;gt;的ref属性实际是内部&amp;lt; ref bean=”…” /&amp;gt;的简写，bean属性指定引用的bean的id。&lt;/li&gt;
&lt;li&gt;内部bean，即&amp;lt; bean &amp;gt;元素：容器自动忽视id、name和scope等属性，随着外部bean产生。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt; array &amp;gt;：对应数组&lt;/li&gt;
&lt;li&gt;&amp;lt; list &amp;gt;：对应List&lt;/li&gt;
&lt;li&gt;&amp;lt; set &amp;gt;：对应Set&lt;/li&gt;
&lt;li&gt;&amp;lt; map &amp;gt;：对应Map，名称和值都可是任意类型。&amp;lt; enrty &amp;gt;元素的key属性和value属性是字符串形式，key-ref属性是子元素&amp;lt; key &amp;gt;的子元素 &amp;lt; ref bean=”…” /&amp;gt; 的简写，value-ref属性是子元素 &amp;lt; ref bean=”…” /&amp;gt; 的简写（就是key所对应的value了，不要再写&amp;lt; value &amp;gt;元素了），这样对于只由字符串或bean组成的map，只要一行&amp;lt; entry &amp;gt;就可以写好了。&lt;/li&gt;
&lt;li&gt;&amp;lt; props &amp;gt;：对应Properties，名称和值都必须是String类型。&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;props&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot; jdbc.driver.className&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;jdbc.url&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/mydb&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;props&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空值，&amp;lt; null &amp;gt;元素对应null关键字，类似setText(null)，而value=””实际是setText(“”)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多可参看XML的Elment和Content Model给出的说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;奇淫巧技：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;引入c-命名空间&lt;code&gt;xmlns:p=&amp;quot;http://www.springframework.org/schema/c&amp;quot;&lt;/code&gt;后，简化&amp;lt; constructor-arg &amp;gt;元素。引入p-命名空间&lt;code&gt;xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;&lt;/code&gt;后，简化&amp;lt; property &amp;gt;元素。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Bar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Baz&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;first&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myBar&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;second&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;456&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myBaz&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;p:first&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;c:myBar-ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;p:second&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;456&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;p:myBaz-ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了可以对应参数或者属性的name，也可以按序等。&lt;/p&gt;
&lt;h3 id=&quot;Bean的装载模式&quot;&gt;&lt;a href=&quot;#Bean的装载模式&quot; class=&quot;headerlink&quot; title=&quot;Bean的装载模式&quot;&gt;&lt;/a&gt;Bean的装载模式&lt;/h3&gt;&lt;p&gt;默认情况下，ApplictaionContext容器（BeanFactory总是懒汉）动就会创建、配置所有的singleton型bean，这就是pre-instantiation模式（饿汉），有助于尽早发现配置或环境的问题。另一种相反的模式是lazy-initialization（懒汉），在向容器索取bean时对bean进行创建。装载模式在XML中由&amp;lt; bean &amp;gt;元素的lazy-init属性控制，若为true则是懒汉模式。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lazy-init&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果某个饿汉对懒汉有依赖关系，懒汉也就不能懒了，必须创建、配置后被注入饿汉bean。&lt;/p&gt;
&lt;p&gt;容器级别（应该是配置文件级别，因为容器可以有多个配置文件？）的装载模式由&amp;lt; beans &amp;gt;元素的&amp;lt; default-lazy-init &amp;gt;属性控制。&lt;/p&gt;
&lt;h3 id=&quot;Bean的自动装配&quot;&gt;&lt;a href=&quot;#Bean的自动装配&quot; class=&quot;headerlink&quot; title=&quot;Bean的自动装配&quot;&gt;&lt;/a&gt;Bean的自动装配&lt;/h3&gt;&lt;p&gt;引用bean时，总是要去找对应的id，而且重复写大量的相似代码，好累。为bean再增加依赖时，还要给XML再增加代码，好累。看看我上面的代码，似乎总习惯把bean名称和要注入的属性名称取同一个，那容器能不能聪明点，就按这种习惯帮我装配？这就是自动装配的一种，byName，按名称装配。&lt;/p&gt;
&lt;p&gt;自动装配（aotowiring）就是Spring自动识别并装配Bean的依赖关系。分为4种类型，可通过&amp;lt; bean &amp;gt;元素的autowire属性指定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no：默认，不自动装配。&lt;/li&gt;
&lt;li&gt;byName：根据属性名称（或ID）自动装配，减少&amp;lt; property &amp;gt;元素，基于setter方法的依赖注入。如有属性名称为bar，则自动寻找名为bar的bean，若有则调用setBar(Bar)方法进行注入。&lt;/li&gt;
&lt;li&gt;byType：根据属性类型自动装配，减少&amp;lt; property &amp;gt;元素，基于setter方法的依赖注入。如有属性类型为Bar，则自动寻找类型为Bar的bean，若有则调用setBar(Bar)方法进行注入。&lt;/li&gt;
&lt;li&gt;constructor：根据属性类型装配，减少&amp;lt; constructor-arg &amp;gt;元素，基于构造器的依赖注入。如有构造器的参数类型为Bar和Baz，则自动寻找类型为Bar和Baz的bean，若有则调用构造器进行注入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;怎么决定用哪种装配类型？&lt;/strong&gt; &amp;lt; beans &amp;gt;元素的default-autowire属性可设置全局，&amp;lt; bean &amp;gt;元素的autowire属性可以覆盖全局，&amp;lt; bean &amp;gt;元素的子元素&amp;lt; constructor-arg &amp;gt;或&amp;lt; property &amp;gt;又可以再覆盖bean上的作用。即XML一般以内为准。如下所示，如果foo以全局byType找，就会报错，如果以&amp;lt; bean &amp;gt;上的byName找，就应是名为’bar’的bean，而实际上，&amp;lt; property &amp;gt;明确指出foo需要的是’goodBar’的bean。&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;beans xmlns=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xmlns:xsi=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xsi:schemaLocation=&lt;span class=&quot;string&quot;&gt;&quot;http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	default-autowire=&lt;span class=&quot;string&quot;&gt;&quot;byType&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;bean &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt; autowire=&lt;span class=&quot;string&quot;&gt;&quot;byName&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;&lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;goodBar&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;bean &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;goodBar&quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;bean &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;x.y.Foo&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;匹配到的bean不是唯一的？&lt;/strong&gt; 除了已举例说明的恰好找到唯一的完美情况，当然还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;零：如果byName和byType找不到对应的属性名称或类型的bean，则不会进行注入，就像&amp;lt; property &amp;gt;常用于可选的属性。而如果constructor找不到对应的构造器参数类型的bean，则会提示错误，&amp;lt; constructor-arg &amp;gt;常用于必选的属性。&lt;/li&gt;
&lt;li&gt;多：重复的bean名称一般IDE就先不会允许了，在初始化容器时也会早早报错，因此byName无需苦恼。但是byType和constructor这些根据类型装配的模式，在面对多种同类型的bean时就会报错，如果可以设置其中只有一个bean允许被自动装配，其他不能，那就没有问题了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;怎么设置bean允许被自动装配？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt; bean &amp;gt;元素的&lt;strong&gt;primary&lt;/strong&gt;属性，起的是突出某一个bean的作用。默认所有候选bean的primary为false（第3版的《Spring技术内幕》时是true，应该是Spring早期版本的失误），如果恰好只有一个候选bean的primary为true，则表示突出的，被选出装配。&lt;/li&gt;
&lt;li&gt;&amp;lt; bean &amp;gt;元素的&lt;strong&gt;autowire-candidate&lt;/strong&gt;属性，用于设置bean是否允许被自动装配。默认所有候选bean的autowire-candidate为true，表示允许被自动装配。比起primary它有更大的灵活性。(including annotation style configurations such as @Autowired). 顶层的&amp;lt; beans &amp;gt;元素还有个&lt;strong&gt;default-autowire-candidates&lt;/strong&gt;属性，通过对bean的名称进行模式匹配筛选并设置哪些bean允许被自动装配。例如default-autowire-candidates=”*Dao,*Service”表示所有以Dao或Service名称结尾的bean允许被自动装配，其他bean被排除。依然是内部为王， &amp;lt; bean &amp;gt;元素的autowire-candidate属性覆盖全局的default-autowire-candidates属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意区别，禁止“被”自动装配的bean表示不能被自动注入到别的bean中，不表示不可以自动装配别人，被动由上面这几个属性决定。主动是由autowire属性决定的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动装配的利与弊&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动装配不仅减少了配置&amp;lt; constructor-arg &amp;gt;或&amp;lt; property &amp;gt;元素，也有利于对象的版本升级。&lt;/li&gt;
&lt;li&gt;但是显然，简单属性例如基本类型、java.lang.Class、java.lang.String类、    基本类型数组等无法自动装配。让Spring干太多猜测超出XML文档的事情，容易失控。匹配到多个bean的事情也时常发生。因此自动装配应当慎用，或者考虑用Annotation-based容器配置控制更多的自动装配细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Spring-IoC-内幕&quot;&gt;&lt;a href=&quot;#Spring-IoC-内幕&quot; class=&quot;headerlink&quot; title=&quot;Spring IoC 内幕&quot;&gt;&lt;/a&gt;Spring IoC 内幕&lt;/h2&gt;&lt;p&gt;Spring框架中IoC容器的基础是.org.springframework.beans和org.springframework.context包，有两个主要的容器系列：一个是实现&lt;code&gt;BeanFactory&lt;/code&gt;接口的简单容器系列，它们提供了一种能够管理任何类型对象的配置机制；另一个是实现 BeanFactory 的子接口&lt;code&gt;ApplicationContext&lt;/code&gt;应用上下文的高级容器系列，它们增加了Spring AOP特性简单集成、消息资源处理（国际化）、事件发布和应用层具体上下文如用于Web应用的WebApplicationContext。&lt;/p&gt;
&lt;p&gt;在Spring中，由Spring IoC容器管理的对象称为&lt;code&gt;Bean&lt;/code&gt;。在最早的版本中，Spring被设计用来管理JavaBean，而现在Spring已经可以管理任何对象，即使它不具备默认构造器或getter和setter方法这些JavaBean的特性，但“Spring bean”这个术语仍然被保存了下来。Spring bean可以说POJO，甚至还可以是EJB对象等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JavaBean&lt;/strong&gt;是符合一定规范编写的Java类，不是一种技术，而是一种规范。JavaBean规范包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有属性为private&lt;/li&gt;
&lt;li&gt;提供公共的无参构造函数&lt;/li&gt;
&lt;li&gt;提供getter和setter&lt;/li&gt;
&lt;li&gt;实现serializable接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sun最早于1996年制定了JavaBean 标准的类，最初的想法是将JavaBean打造成能够被构建工具可视化地操作的可重用的组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POJO&lt;/strong&gt;是Plain Old Java Object的缩写，是除了Java语言规范外没有任何限制的Java对象。POJO不应继承任何外部预先设定的类，不应实现任何外部预先设定的接口，不应包含任何外部预先设定的注释（虽然实际上很多声称纯POJO的软件产品和框架仍然需要使用预先设定的注释，如用作持久层。因此如果移除注释后是POJO的话，则该对象就是POJO）。&lt;/p&gt;
&lt;p&gt;早期版本的很多框架都是重量型框架，强迫应用继承它们的类或实现它们的接口，从而让应用跟框架绑死，难以编写测试代码，如EJB 2的无状态会话bean必须实现SessionBean接口。后来发展了很多轻量型框架，不强迫业务对象遵循平台特定接口，允许开发者在POJO中实现业务逻辑，使应用不依附于某种框架，虽然相对于重量级框架，轻量型框架的处理能力也有所下降。&lt;/p&gt;
&lt;p&gt;其实JavaBean就是一个serializable、有无参构造函数的、允许用getter和setter方法访问属性的POJO。而POJO就是简单的JavaBean。如果严格遵循JavaBean规范，类必须实现serializable接口，就会略微打破POJO模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; ——参考自&lt;a href=&quot;en.m.wikipedia.org/wiki/Plani_Old_Java_Object&quot;&gt;Wiki&lt;/a&gt;和&lt;a href=&quot;www.importnew.com/14019.html&quot;&gt;ImportNew&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;BeanFactory和ApplicationContext&quot;&gt;&lt;a href=&quot;#BeanFactory和ApplicationContext&quot; class=&quot;headerlink&quot; title=&quot;BeanFactory和ApplicationContext&quot;&gt;&lt;/a&gt;BeanFactory和ApplicationContext&lt;/h3&gt;&lt;p&gt;前面介绍过，BeanFactory接口是容器始祖，DefaultListableBeanFactory是它的一个实现类，现在我们以下面的3行代码的基本容器替代上面示例&lt;code&gt;ApplicationContext ctx=new ClassPathXmlApplicationContext(&amp;quot;x/y/beans.xml&amp;quot;)&lt;/code&gt;这行代码。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DefaultListableBeanFactory ctx=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultListableBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XmlBeanDefinitionReader reader=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlBeanDefinitionReader(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reader.loadBeanDefinitions(&lt;span class=&quot;string&quot;&gt;&quot;x/y/beans.xml&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;程序依然正常。但是log确实不一样了，会发现BeanFactory的确比ApplicationContext简陋。来看看ApplicationContext在源码上都多了些啥功能。在&lt;strong&gt;ClassPathXmlApplicationContext&lt;/strong&gt;的构造器中，实际调用了其高祖（即爹的爹的爹的爹）&lt;strong&gt;AbstractApplicationContext&lt;/strong&gt;抽象类的&lt;code&gt;refresh()&lt;/code&gt;方法，ApplicationContext的多功能基本都体现在这了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/09/2918146704.png&quot; alt=&quot;2015-09-03_194229.png&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException, IllegalStateException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.startupShutdownMonitor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Prepare this context for refreshing.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		prepareRefresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Tell the subclass to refresh the internal bean factory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Prepare the bean factory for use in this context.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		prepareBeanFactory(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 设置允许BeanFactory的（创建）后处理器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			postProcessBeanFactory(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 调用BeanFactory的后处理器，这些后处理器是在Bean定义中向容器注册的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			invokeBeanFactoryPostProcessors(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//注册Bean的后处理器，在Bean的创建过程中调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			registerBeanPostProcessors(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 初始化上下文的消息源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			initMessageSource();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 初始化上下文的事件机制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			initApplicationEventMulticaster();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 初始化其他特殊Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			onRefresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 检查并注册监听器Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			registerListeners();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 实例化所有非lazy-init的singleton型Bean.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			finishBeanFactoryInitialization(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 最后，发布相应容器事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			finishRefresh();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (BeansException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			logger.warn(&lt;span class=&quot;string&quot;&gt;&quot;Exception encountered during context initialization - cancelling refresh attempt&quot;&lt;/span&gt;, ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 销毁已生成的singletons型Bean，防止资源占用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			destroyBeans();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// Reset &#39;active&#39; flag.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cancelRefresh(ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// Propagate exception to caller.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; ex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// Reset common introspection caches in Spring&#39;s core, since we&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// might not ever need metadata for singleton beans anymore...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			resetCommonCaches();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那3行代码只是做了和&lt;code&gt;obtainFreshBeanFactory()&lt;/code&gt;方法同样的工作。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; ConfigurableListableBeanFactory &lt;span class=&quot;title&quot;&gt;obtainFreshBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	refreshBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ConfigurableListableBeanFactory beanFactory = getBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (logger.isDebugEnabled()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		logger.debug(&lt;span class=&quot;string&quot;&gt;&quot;Bean factory for &quot;&lt;/span&gt; + getDisplayName() + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; beanFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;refreshBeanFactory()&lt;/code&gt;方法是抽象方法，真正的实现由子类&lt;strong&gt;AbstractRefreshableApplicationContext&lt;/strong&gt;来完成（模板方法的设计模式）同样，&lt;code&gt;DefaultListableBeanFactory beanFactory = createBeanFactory()&lt;/code&gt;先创建容器。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;refreshBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasBeanFactory()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		destroyBeans();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		closeBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DefaultListableBeanFactory beanFactory = createBeanFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		beanFactory.setSerializationId(getId());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		customizeBeanFactory(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		loadBeanDefinitions(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.beanFactoryMonitor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.beanFactory = beanFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ApplicationContextException(&lt;span class=&quot;string&quot;&gt;&quot;I/O error parsing bean definition source for &quot;&lt;/span&gt; + getDisplayName(), ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;loadBeanDefinitions(beanFactory)&lt;/code&gt;也是抽象方法，真正的实现由子孙&lt;strong&gt;AbstractXmlApplicationContext&lt;/strong&gt;完成，代码类似，至此可以确定，基于BeanFactory的那3行代码的工作被包含在了ApplicationContext的&lt;code&gt;obtainFreshBeanFactory()&lt;/code&gt;方法中完成。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DefaultListableBeanFactory beanFactory)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException, IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create a new XmlBeanDefinitionReader for the given BeanFactory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	XmlBeanDefinitionReader beanDefinitionReader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlBeanDefinitionReader(beanFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Configure the bean definition reader with this context&#39;s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// resource loading environment.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	beanDefinitionReader.setEnvironment(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getEnvironment());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	beanDefinitionReader.setResourceLoader(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	beanDefinitionReader.setEntityResolver(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ResourceEntityResolver(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Allow a subclass to provide custom initialization of the reader,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// then proceed with actually loading the bean definitions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	initBeanDefinitionReader(beanDefinitionReader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	loadBeanDefinitions(beanDefinitionReader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;IoC容器初始化&quot;&gt;&lt;a href=&quot;#IoC容器初始化&quot; class=&quot;headerlink&quot; title=&quot;IoC容器初始化&quot;&gt;&lt;/a&gt;IoC容器初始化&lt;/h3&gt;&lt;p&gt;从上面基于BeanFactory和基于ApplicationContext的两种方式看出，&lt;code&gt;loadBeanDefinitions(...)&lt;/code&gt;的重载方法们作为主力承担了IoC容器的狭义初始化的任务。其中的主要工作，由XmlBeanDefinitionReader的&lt;code&gt;doLoadBeanDefinitions(...)&lt;/code&gt;方法进行体现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Document doc = doLoadDocument(inputSource, resource);	&lt;span class=&quot;comment&quot;&gt;//读入并解析XML文档&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; registerBeanDefinitions(doc, resource);			&lt;span class=&quot;comment&quot;&gt;//将XML中定义好的bean转换成BeanDefinition，向容器注册&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续深入，发现交由BeanDefinitionDocumentReader接口的实现类&lt;strong&gt;DefaultBeanDefinitionDocumentReader&lt;/strong&gt;来负责解析和注册bean。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registerBeanDefinitions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Document doc, Resource resource)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeanDefinitionStoreException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; countBefore = getRegistry().getBeanDefinitionCount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	documentReader.registerBeanDefinitions(doc, createReaderContext(resource));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getRegistry().getBeanDefinitionCount() - countBefore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DefaultBeanDefinitionDocumentReader&lt;/strong&gt;类处理多种元素，其中&amp;lt; bean &amp;gt;元素由&lt;code&gt;processBeanDefinition(...)&lt;/code&gt;方法负责。最终，由&lt;strong&gt;BeanDefinitionParserDelegate&lt;/strong&gt;代理类的&lt;code&gt;parseBeanDefinitionElement(...)&lt;/code&gt;实现解析，&lt;strong&gt;DefaultListableBeanFactory&lt;/strong&gt;类的&lt;code&gt;registerBeanDefinition(...)&lt;/code&gt;方法实现注册。详细可看《Spring技术内幕》一书。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;processBeanDefinition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Element ele, BeanDefinitionParserDelegate delegate)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 把&amp;lt; bean &amp;gt;解析成相应的BeanDefinition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bdHolder != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 向容器注册BeanDefinition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (BeanDefinitionStoreException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			getReaderContext().error(&lt;span class=&quot;string&quot;&gt;&quot;Failed to register bean definition with name &#39;&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					bdHolder.getBeanName() + &lt;span class=&quot;string&quot;&gt;&quot;&#39;&quot;&lt;/span&gt;, ele, ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Send registration event.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		getReaderContext().fireComponentRegistered(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BeanComponentDefinition(bdHolder));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总结起来，IoC容器的狭义初始化工作内容包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对configuration metadata进行资源定位、载入&lt;/li&gt;
&lt;li&gt;把用户定义好的bean解析成容器内部的数据结构，即BeanDefinition&lt;/li&gt;
&lt;li&gt;向容器注册这些BeanDefinition&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BeanFactory和ApplicationContext容器的初始化都视为广义初始化，但实际后者包含了前者的工作，即狭义初始化部分。&lt;/p&gt;
&lt;p&gt;BeanDefinition中包含了关于bean的创建方式、依赖注入方式、装配类型、装配模式、范围scope等信息。以后，容器就可以通过BeanDefinition来创建、注入和管理Bean。&lt;/p&gt;
&lt;h3 id=&quot;依赖注入&quot;&gt;&lt;a href=&quot;#依赖注入&quot; class=&quot;headerlink&quot; title=&quot;依赖注入&quot;&gt;&lt;/a&gt;依赖注入&lt;/h3&gt;&lt;p&gt;IoC容器的初始化过程不包括依赖注入。依赖注入通常发生在应用第一次通过&lt;code&gt;getBean(...)&lt;/code&gt;向容器索取Bean的时候。&lt;br&gt;在ApplicationContext应用上下文容器中，&lt;code&gt;finishBeanFactoryInitialization(beanFactory)&lt;/code&gt;会预实例化（pre-instantiation）所有no-lazy-init的singleton型Bean，而no-lazy-init的singleton型也是Bean的默认形态，预实例化会完成依赖注入。虽然这种容器的使用方式会对容器一开始的性能有一些影响，但却能够提高应用第一次取得Bean的性能，因为依赖注入早已完成。通过&amp;lt; bean &amp;gt;元素的属性lazy-init=”true”，开发者显示地向容器索取Bean时才进行实例化和依赖注入。BeanFactory容器则完全无视lazy-init属性设置，永远是懒汉模式。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;RT，断断续续写……&lt;/p&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.stackess.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.stackess.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.stackess.com/tags/Spring/"/>
    
      <category term="源码分析" scheme="http://www.stackess.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>log4j 1.x 概述、意义和源码分析</title>
    <link href="http://www.stackess.com/log4j/"/>
    <id>http://www.stackess.com/log4j/</id>
    <published>2015-07-10T10:47:00.000Z</published>
    <updated>2016-04-08T17:03:32.998Z</updated>
    
    <content type="html">&lt;p&gt;简单介绍log4j 1.x和官方Manual，本文的重点是对其意义和源码的分析，最后展示一般实践。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Log4j-概述&quot;&gt;&lt;a href=&quot;#Log4j-概述&quot; class=&quot;headerlink&quot; title=&quot;Log4j 概述&quot;&gt;&lt;/a&gt;Log4j 概述&lt;/h2&gt;&lt;p&gt;日志（logging）是开发周期中非常重要的组件，它能够提供程序运行时的精确内容，事后可保存下来研究。但是，日志也会降低程序速度，如果内容太详细，会令你瞎眼在茫茫日志语句中。Log4j的设计目标就是可靠性、快速和扩展性。&lt;/p&gt;
&lt;p&gt;Log4j由三种组件组成——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logger：日记信息生成器&lt;/li&gt;
&lt;li&gt;Appender：日志信息的输出目标（output destination）&lt;/li&gt;
&lt;li&gt;Layout：日志信息（logging request）的显示格式&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Log4j-意义&quot;&gt;&lt;a href=&quot;#Log4j-意义&quot; class=&quot;headerlink&quot; title=&quot;Log4j 意义&quot;&gt;&lt;/a&gt;Log4j 意义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The first and foremost advantage of any logging API over plain System.out.println resides in its ability to disable certain log statements while allowing others to print unhindered.  —— &lt;a href=&quot;http://logging.apache.org/log4j/1.2/manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;log4j/1.2/manual&lt;/a&gt;&lt;br&gt;译：为什么使用logging API作为日志实现，而不是简单粗暴的System.out.println？首要好处就是可以控制哪些log statement输出哪些不输出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解是，log4j进行了两次分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最简单的是对log statement的等级分类，trace &amp;lt; debug &amp;lt; info &amp;lt; warn &amp;lt; error &amp;lt; fatal。比如输出日志时，若设阈值为info则只有level不低于info的才可以输出（因此log statement又被视为log request），那么trace和dubug的日志就被禁止了，就像“未成年人禁止进入网吧”一样，再配置日志的输出目标和输出格式后就可以打印出来。&lt;br&gt;备注：如果要开发一个简单程序，并使用这些功能做日志，用log4j可能有点大材小用了吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对这些有level的log request再外包一层java class，称为Logger，可提供更丰富的日志控制机制。比如，为不同的Logger配置不同的输出目标和格式；下级Logger默认接受上级Logger的输出配置；Logger也有level，这个level用于控制其下的log request的输出阈值，即“只有level不低于info的才可以输出”一句中的info；实际经验中，还经常需要插入log request的java class的信息，结合反射机制，就可以一口气令Logger获得，精简代码。&lt;br&gt;备注：在log4j的版本1.2之前，包装的是Category，而在1.2之后，Logger继承并且替代了它的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除此之外，log4j能够将日志输出到多种、多个目标地，如控制台、文件、GUI组件、套接口服务器、NT的事件记录器、UNIX Syslog守护进程等，甚至异步输出，并且可以控制每一条日志的输出格式。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Log4j-Manual&quot;&gt;&lt;a href=&quot;#Log4j-Manual&quot; class=&quot;headerlink&quot; title=&quot;Log4j Manual&quot;&gt;&lt;/a&gt;Log4j Manual&lt;/h2&gt;&lt;p&gt;简单记录官方的&lt;a href=&quot;http://logging.apache.org/log4j/1.2/manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manual&lt;/a&gt;，只阐述结果，具体的解析看下一节会更加明白。&lt;/p&gt;
&lt;h3 id=&quot;Logger-hierarchy&quot;&gt;&lt;a href=&quot;#Logger-hierarchy&quot; class=&quot;headerlink&quot; title=&quot;Logger hierarchy&quot;&gt;&lt;/a&gt;Logger hierarchy&lt;/h3&gt;&lt;p&gt;Logger根据命名分层级（&lt;code&gt;Named Hierarchy&lt;/code&gt;），子名用父名作为前缀，用点“.”分隔，类似package命名习惯，例如com.foo是com.foo.Bar的父亲，com是com.foo.Bar的祖先。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;root Logger&lt;/code&gt;是所有Logger的祖先，有如下属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总是存在的&lt;/li&gt;
&lt;li&gt;不可以通过名字获得&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;root Logger通过 Logger.getRootLogger 方法获得。其他的Logger通过 Logger.getLogger(name) 方法获得，并且传递同样的参数name总是返回同一个Logger实例的引用。&lt;/p&gt;
&lt;p&gt;Logger的level相当于java class的成员变量一样，遵循继承机制（&lt;code&gt;Level Inheritance&lt;/code&gt;）。用于控制其下各log request的是否能够输出，如果log request的level不小于产生它的Logger的level，则它是enabled，否则是disabled（&lt;code&gt;Basic Selection Rule&lt;/code&gt;）。&lt;/p&gt;
&lt;h3 id=&quot;Appender-and-Layout&quot;&gt;&lt;a href=&quot;#Appender-and-Layout&quot; class=&quot;headerlink&quot; title=&quot;Appender and Layout&quot;&gt;&lt;/a&gt;Appender and Layout&lt;/h3&gt;&lt;p&gt;调用 addAppender 方法可将Appender绑到Logger，指定Logger的一个输出目标。每一个enabled logging request都会被传递给它的Logger的所有Appenders和这个Logger的祖先的所有Appedenrs进行输出（&lt;code&gt;Appenders Additivity&lt;/code&gt;）。如果将某个Logger $C$的additive设为false，相当于分了家，表示不需要祖先的Appenders，这个Logger $C$的子孙的additive默认仍是true，只向上继承到Logger $C$的Appenders。&lt;/p&gt;
&lt;p&gt;Layout是类似String.format(..)一样的文本格式化，具体可见&lt;a href=&quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PatternLayout&lt;/a&gt;类。&lt;/p&gt;
&lt;h3 id=&quot;范例&quot;&gt;&lt;a href=&quot;#范例&quot; class=&quot;headerlink&quot; title=&quot;范例&quot;&gt;&lt;/a&gt;范例&lt;/h3&gt;&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Logger barlogger = Logger.getLogger(&lt;span class=&quot;string&quot;&gt;&quot;com.foo.Bar&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//子类在前也ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger logger = Logger.getLogger(&lt;span class=&quot;string&quot;&gt;&quot;com.foo&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BasicConfigurator.configure();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.&lt;span class=&quot;keyword&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;before set level&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//enabled&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.setLevel(Level.INFO);&lt;span class=&quot;comment&quot;&gt;//&quot;com.foo.Bar&quot;的logger也从&quot;com.foo&quot;继承info的level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.&lt;span class=&quot;keyword&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;after set level&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//disabled&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barlogger.info(&lt;span class=&quot;string&quot;&gt;&quot;after set level&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//enabled&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h2&gt;&lt;p&gt;针对上面的范例，可以从源码分析出Logger层次特征、输出目标Appenders和level控制是如何实现的，主要涉及的类和接口如下图所示。其中，Logger、LogManager、Hierarchy和Catagory最为重要，应用的主要涉及模式有工厂、代理、repository、观察者等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/07/1165764492.jpg&quot; alt=&quot;Main.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面按语句来一步步跟踪解析，保持耐心！&lt;/p&gt;
&lt;h3 id=&quot;Logger-getLogger-quot-com-foo-Bar-quot-和Logger-getLogger-quot-com-foo-quot&quot;&gt;&lt;a href=&quot;#Logger-getLogger-quot-com-foo-Bar-quot-和Logger-getLogger-quot-com-foo-quot&quot; class=&quot;headerlink&quot; title=&quot;Logger.getLogger(&amp;quot;com.foo.Bar&amp;quot;)和Logger.getLogger(&amp;quot;com.foo&amp;quot;)&quot;&gt;&lt;/a&gt;&lt;code&gt;Logger.getLogger(&amp;quot;com.foo.Bar&amp;quot;)&lt;/code&gt;和&lt;code&gt;Logger.getLogger(&amp;quot;com.foo&amp;quot;)&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在Logger的静态方法getLogger(..)中，实际是去调用LogManager的静态方法，代码如下。&lt;br&gt;&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Logger &lt;span class=&quot;title&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; LogManager.&lt;span class=&quot;title&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在LogManager类中有static块，JVM在载入LogManager类后会先执行static块，简略代码如下。初始化Hierarchy，然后查找外设的配置信息。注意到root的level是debug等级的。&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// By default we use a DefaultRepositorySelector which always returns &#39;h&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hierarchy &lt;span class=&quot;keyword&quot;&gt;h&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hierarchy(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RootLogger((Level) Level.DEBUG))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositorySelector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultRepositorySelector(&lt;span class=&quot;keyword&quot;&gt;h&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 在CLASSPATH查找是否有配置信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 在当前目录查找是否有log4j.xml配置文件 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 在当前目录查找是否有log4j.properties配置文件 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;先关注到初始化Hierarchy结构这里，Hierarchy是一个实现了LoggerRepository接口的重要类，它的逻辑结构类似树，构造函数代码如下。主要的初始化工作包括root、level、ht等，ht是一个HashTable类型的成员变量，它是各个Logger实际存储的物理结构。&lt;br&gt;注意到Hierarchy是all等级的，任何都允许，虽然这在范例中并没有利用到，但是实际上Hierarchy也有阈值level控制程序中所有的Logger。&lt;br&gt;&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hierarchy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Logger root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ht = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hashtable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  listeners = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vector(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.root = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Enable all level levels by default.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setThreshold(Level.ALL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.root.setHierarchy(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rendererMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RendererMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  defaultFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultCategoryFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再回来看LogManager.getLogger(..)，代码如下。绕了几圈后（因为抽象了repositorySelector），其实是调用Hierarchy实例的getLogger(..)方法。&lt;br&gt;&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Logger &lt;span class=&quot;title&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Delegate the actual manufacturing of the logger to the logger repository.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getLoggerRepository().getLogger(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重头戏就是Hierarchy的getLogger(..)方法，代码如下。接下来分析。&lt;br&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Logger getLogger(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; name, LoggerFactory factory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CategoryKey &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CategoryKey(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Logger logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (ht) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt; o = ht.&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			logger = factory.makeNewLoggerInstance(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			logger.setHierarchy(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ht.put(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, logger);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			updateParents(logger);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Logger) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (Logger) o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ProvisionNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// System.out.println(&quot;(&quot;+name+&quot;) ht.get(this) returned ProvisionNode&quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			logger = factory.makeNewLoggerInstance(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			logger.setHierarchy(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ht.put(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, logger);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			updateChildren((ProvisionNode) o, logger);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			updateParents(logger);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// It should be impossible to arrive here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// but let&#39;s keep the compiler happy.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;o instanceof Logger&lt;/strong&gt;&lt;br&gt;如果HashTable已有这个name的logger就直接取出返回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;o == null&lt;/strong&gt;&lt;br&gt;对完全陌生的”com.foo.Bar”，会创建Logger实例放入HashTable，并调用updateParents(logger)更新所有的祖先，代码如下。&lt;br&gt;这个更新操作相当于建立”com.foo”和”com”的ProvisionNode类的伪结点，并插入HashTable，它们都只知道有一个孩子是”com.foo.Bar”，而”com.foo.Bar”的parent指向root。&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; updateParents(Logger cat) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; name = cat.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; length = name.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt; parentFound = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; i = name.lastIndexOf(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			.lastIndexOf(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; substr = name.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		CategoryKey &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CategoryKey(substr); &lt;span class=&quot;comment&quot;&gt;// simple constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt; o = ht.&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Create a provision node for a future parent.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ProvisionNode pn = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProvisionNode(cat);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ht.put(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, pn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Category) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			parentFound = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cat.parent = (Category) o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// no need to update the ancestors of the closest ancestor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ProvisionNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			((ProvisionNode) o).addElement(cat);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Exception e = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;unexpected object type &quot;&lt;/span&gt; + o.getClass() + &lt;span class=&quot;string&quot;&gt;&quot; in ht.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// If we could not find any existing parents, then link with root.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!parentFound)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cat.parent = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行执行Logger.getLogger(“com.foo.Bar”)结果如下。&lt;br&gt;  &lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/07/612158591.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;o instanceof ProvisionNode&lt;/strong&gt;&lt;br&gt;随后执行Logger.getLogger(“com.foo”)，再创建Logger实例放入HableTable并调用updateChildren((ProvisionNode) o, logger)和updateParents(logger)。&lt;br&gt;第一个操作是更新子孙，代码如下。因为已有”com.foo”的ProvisionNode，它知道子孙是”com.foo.Bar”的Logger（且没有正确找到父亲），则”com.foo”的Logger会在”com.foo.Bar”的Logger这做一个相当于树结构的插入操作。&lt;br&gt;第二个操作是更新祖先。会更新”com”的子孙为”com.foo.Bar”和”com.foo”，继续以ProvisionNode伪结点的方式存在。&lt;figure class=&quot;highlight zephir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; void updateChildren(ProvisionNode pn, Logger logger) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// System.out.println(&quot;updateChildren called for &quot; + logger.name);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; last = pn.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; last; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Logger l = (Logger) pn.elementAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// System.out.println(&quot;Updating child &quot; +p.name);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Unless this child already points to a correct (lower) parent,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// make cat.parent point to l.parent and l.parent to cat.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!l.&lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt;.name.startsWith(logger.name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			logger.&lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt; = l.&lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			l.&lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt; = logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后执行Logger.getLogger(“com.foo”)的结果如下。&lt;br&gt;  &lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/07/2661821644.png&quot; alt=&quot;2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果继续调用Logger.getLogger(“com”)，更新子孙只需要在”com.foo”处直接插入，更新祖先指向root，结果如下。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/07/2720670433.png&quot; alt=&quot;3.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;BasicConfigurator-configure&quot;&gt;&lt;a href=&quot;#BasicConfigurator-configure&quot; class=&quot;headerlink&quot; title=&quot;BasicConfigurator.configure()&quot;&gt;&lt;/a&gt;&lt;code&gt;BasicConfigurator.configure()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;先看configure()的代码如下。把一个ConsoleAppender加给了root logger。&lt;br&gt;&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Logger root = Logger.getRootLogger();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  root.addAppender(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConsoleAppender(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PatternLayout(PatternLayout.TTCC_CONVERSION_PATTERN)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再看Logger类的addAppender方法（继承自Categeory类），代码如下。实际Logger类用AppenderAttachableImpl（接AppenderAttachabl的一种Vector实现）来作为Appender的容器，addAppender方法就是在扩充这个容器。&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addAppender&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Appender newAppender)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(aai == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    aai = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AppenderAttachableImpl();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  aai.addAppender(newAppender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository.fireAddAppenderEvent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, newAppender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;logger-debug&quot;&gt;&lt;a href=&quot;#logger-debug&quot; class=&quot;headerlink&quot; title=&quot;logger.debug()&quot;&gt;&lt;/a&gt;&lt;code&gt;logger.debug()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/07/461615257.png&quot; alt=&quot;5.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;调用Catagory类的debug()方法代码如下。要先判断Hierarchy的level阈值是否允许。&lt;br&gt;&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (repository.isDisabled(Level.DEBUG_INT))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Level.DEBUG.isGreaterOrEqual(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getEffectiveLevel())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		forcedLog(FQCN, Level.DEBUG, message, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再判断level不为null的最近的祖先（含自己）是否允许。&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Level getEffectiveLevel() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Category c = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;; c != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;; c = c.parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c.level != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.level;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// If reached will cause an NullPointerException.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于默认Hierarchy的level为all，root的level为debug，debug&amp;gt;=debug，则可以顺利跳入forcelog(..)，forcelog(..)再跳入callAppenders(..)，其代码如下。方法appendLoopOnAppenders(..)就是向容器里的各个Appender通知LoggingEvent（设计模式中观察者模式），通知的过程是一个父结点回溯的过程，会通知所有的祖先。除非某个Logger的additive是false，则回溯过程会立刻终止跳出。&lt;br&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;callAppenders&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;LoggingEvent &lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; writes = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Category c = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;; c != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;; c = c.parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Protected against simultaneous call to addAppender, removeAppender,...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c.aai != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		writes += c.aai.appendLoopOnAppenders(&lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!c.additive) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        	&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(writes == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          repository.emitNoAppenderWarning(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;logger-setLevel-Level-INFO-、logger-debug-quot-after-set-level-quot-和barlogger-info-quot-after-set-level-quot&quot;&gt;&lt;a href=&quot;#logger-setLevel-Level-INFO-、logger-debug-quot-after-set-level-quot-和barlogger-info-quot-after-set-level-quot&quot; class=&quot;headerlink&quot; title=&quot;logger.setLevel(Level.INFO)、logger.debug(&amp;quot;after set level&amp;quot;)和barlogger.info(&amp;quot;after set level&amp;quot;)&quot;&gt;&lt;/a&gt;&lt;code&gt;logger.setLevel(Level.INFO)&lt;/code&gt;、&lt;code&gt;logger.debug(&amp;quot;after set level&amp;quot;)&lt;/code&gt;和&lt;code&gt;barlogger.info(&amp;quot;after set level&amp;quot;)&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;这三句实际在 3 中已经分析了，同样是受到Hierarchy和最近祖先（含自己）的level的影响。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实践&quot;&gt;&lt;a href=&quot;#实践&quot; class=&quot;headerlink&quot; title=&quot;实践&quot;&gt;&lt;/a&gt;实践&lt;/h2&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;import&lt;/span&gt; org.apache.log4j.Logger;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;import&lt;/span&gt; org.apache.log4j.BasicConfigurator;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;import&lt;/span&gt; com.foo.Bar;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApp&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Logger logger = Logger.getLogger(MyApp.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BasicConfigurator.configure();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		logger.info(&lt;span class=&quot;string&quot;&gt;&quot;Entering application.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Bar bar = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		bar.doIt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		logger.info(&lt;span class=&quot;string&quot;&gt;&quot;Exiting application.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.log4j.Logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Bar &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Logger logger = Logger.getLogger(Bar.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; doIt() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		logger.&lt;span class=&quot;keyword&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Did it again!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考推荐&quot;&gt;&lt;a href=&quot;#参考推荐&quot; class=&quot;headerlink&quot; title=&quot;参考推荐&quot;&gt;&lt;/a&gt;参考推荐&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blogjava.net/DLevin/archive/2012/06/12/380647.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入Log4J源码之SimpleLog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blogjava.net/DLevin/archive/2012/06/28/381667.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入Log4J源码之Log4J Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blogjava.net/DLevin/archive/2012/07/04/382131.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入Log4J源码之Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blogjava.net/DLevin/archive/2012/07/10/382676.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入Log4J源码之Appender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blogjava.net/DLevin/archive/2012/07/10/382678.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入Log4J源码之LoggerRepository和Configurator&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍log4j 1.x和官方Manual，本文的重点是对其意义和源码的分析，最后展示一般实践。&lt;/p&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.stackess.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.stackess.com/tags/Java/"/>
    
      <category term="源码分析" scheme="http://www.stackess.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="log4j" scheme="http://www.stackess.com/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>Java LeTeX Report 概述和示例</title>
    <link href="http://www.stackess.com/JLR/"/>
    <id>http://www.stackess.com/JLR/</id>
    <published>2015-06-30T10:53:00.000Z</published>
    <updated>2016-04-08T16:11:21.236Z</updated>
    
    <content type="html">&lt;p&gt;JLR（Java LaTeX Report）是基于MiKTeX和Velocity模板引擎构建的可生成LaTeX的一个Java包，对Tutorial的示例进行试验和稍加改动。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;JLR-概述&quot;&gt;&lt;a href=&quot;#JLR-概述&quot; class=&quot;headerlink&quot; title=&quot;JLR 概述&quot;&gt;&lt;/a&gt;JLR 概述&lt;/h2&gt;&lt;p&gt;由nixo-soft开发的JLR（Java LaTex Report）的Java包，可应用于生成LaTeX。&lt;/p&gt;
&lt;p&gt;从这段官方介绍可以看出，免费没开源，在Maven上也没有，基于MiKTeX和&lt;a href=&quot;http://velocity.apache.org/engine/releases/velocity-1.7/user-guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Velocity&lt;/a&gt;模板引擎构建。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Version: 2.1 (Last modified: 20 Aug 2013 19:10:19)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Filesize: 1.25 MB (compressed)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requirements: Java Runtime Environment (JRE) 6 Update 20 / Installed or portable LaTeX Distribution(e.g. MiKTeX or MiKTeX Portable)&lt;/li&gt;
&lt;li&gt;Simple conversion of Java to PDF (Java2PDF)&lt;/li&gt;
&lt;li&gt;Use of the very stable, proven and free LaTeX software package for generating PDF files&lt;/li&gt;
&lt;li&gt;Uses the Apache Velocity Template Engine&lt;/li&gt;
&lt;li&gt;Lightweight, small and powerful&lt;/li&gt;
&lt;li&gt;It is a free library (Freeware)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; The Open Source PDF-Renderer is suitable for displaying PDFs within a Java application&lt;br&gt;&lt;strong&gt;Tutorial:&lt;/strong&gt; &lt;a href=&quot;http://www.nixo-soft.de/tutorials/jlr/JLRTutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nixo-soft.de/tutorials/jlr/JLRTutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JLR-范例&quot;&gt;&lt;a href=&quot;#JLR-范例&quot; class=&quot;headerlink&quot; title=&quot;JLR 范例&quot;&gt;&lt;/a&gt;JLR 范例&lt;/h2&gt;&lt;p&gt;一个由Tutorial稍加改动的例子，文档结构图如下。要引入jlr.jar，准备好LaTeX模板文件invoiceTemplate.tex和invoice的CTAN包（&lt;a href=&quot;http://www.ctan.org/pkg/invoice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/06/1864300246.png&quot; alt=&quot;2015-06-30_183023.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在foreach处有改动的 &lt;strong&gt;invoiceTemplate.tex&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;documentclass&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;letter&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;usepackage&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;invoice&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Josh Parker \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         5650 Webster Ave \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         West Palm Beach, Florida 33405 \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         JParker@mail.com&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;31-May-2010&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;document&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;letter&amp;#125;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;$CustomerName \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               $CustomerStreet \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               $CustomerZip&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;opening&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Invoice no. $Number&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dear customer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;invoice&amp;#125;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Euro&amp;#125;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;0&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;ProjectTitle&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Example Project&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#foreach( &lt;span class=&quot;formula&quot;&gt;$s in $&lt;/span&gt;services )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;Fee&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;$s.getName()&amp;#125;&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;span class=&quot;formula&quot;&gt;$s.getUnit()&amp;#125; &amp;#123;$&lt;/span&gt;s.getCount()&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;invoice&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;closing&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Best regards&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;letter&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;document&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果用的是MikTeX portable，得改用JLRGenerator，具体见Tutorial，这里的是对应JLRConverter的 &lt;strong&gt;App.java&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		File workingDirectory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(System.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;user.dir&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				+ File.separator + &lt;span class=&quot;string&quot;&gt;&quot;resources&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 工作目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		File template = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(workingDirectory.getAbsolutePath()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				+ File.separator + &lt;span class=&quot;string&quot;&gt;&quot;invoiceTemplate.tex&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 模板路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		File outputDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(workingDirectory.getAbsolutePath()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				+ File.separator + &lt;span class=&quot;string&quot;&gt;&quot;invoice&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 输出路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!outputDir.isDirectory()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			outputDir.mkdir();&lt;span class=&quot;comment&quot;&gt;// 确保输出路径存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		File invoice1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(outputDir.getAbsolutePath() + File.separator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				+ &lt;span class=&quot;string&quot;&gt;&quot;invoice1.tex&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 账单文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 第一步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			JLRConverter converter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JLRConverter(workingDirectory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 第二步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			converter.replace(&lt;span class=&quot;string&quot;&gt;&quot;Number&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			converter.replace(&lt;span class=&quot;string&quot;&gt;&quot;CustomerName&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Ivan Pfeiffer&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			converter.replace(&lt;span class=&quot;string&quot;&gt;&quot;CustomerStreet&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Schwarzer Weg 4&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			converter.replace(&lt;span class=&quot;string&quot;&gt;&quot;CustomerZip&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;13505 Berlin&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 替换掉Tutorial中的 ArrayList&amp;lt;ArrayList&amp;lt;String&amp;gt;&amp;gt; services = new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// ArrayList&amp;lt;ArrayList&amp;lt;String&amp;gt;&amp;gt;();………………&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			List&amp;lt;Service&amp;gt; services = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			services.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Service(&lt;span class=&quot;string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100.2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12.33&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			services.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Service(&lt;span class=&quot;string&quot;&gt;&quot;Orange&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20.44&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.99&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			services.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Service(&lt;span class=&quot;string&quot;&gt;&quot;Banana&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.23&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			converter.replace(&lt;span class=&quot;string&quot;&gt;&quot;services&quot;&lt;/span&gt;, services);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 第三步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!converter.parse(template, invoice1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				System.out.println(converter.getErrorMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			JLROpener.open(invoice1);&lt;span class=&quot;comment&quot;&gt;// 打开账单文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// JLROpener.print(invoice1);//然而并不管用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;增添的 &lt;strong&gt;Service.java&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Service&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; unit;&lt;span class=&quot;comment&quot;&gt;//单价&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; count;&lt;span class=&quot;comment&quot;&gt;//数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; unit,&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; count)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.unit=unit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count=count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUnit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;程序运行后，得到替换后的LaTeX文件 &lt;strong&gt;invoice1.tex&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;documentclass&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;letter&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;usepackage&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;invoice&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Josh Parker \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         5650 Webster Ave \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         West Palm Beach, Florida 33405 \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         JParker@mail.com&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;31-May-2010&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;document&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;letter&amp;#125;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Ivan Pfeiffer \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               Schwarzer Weg 4 \\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               13505 Berlin&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;opening&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Invoice no. 1&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dear customer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;invoice&amp;#125;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Euro&amp;#125;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;0&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;ProjectTitle&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Example Project&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;Fee&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Apple&amp;#125;&lt;/span&gt;&lt;/span&gt; &amp;#123;100.2&amp;#125; &amp;#123;12.33&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;Fee&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Orange&amp;#125;&lt;/span&gt;&lt;/span&gt; &amp;#123;20.44&amp;#125; &amp;#123;0.99&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;Fee&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Banana&amp;#125;&lt;/span&gt;&lt;/span&gt; &amp;#123;0.23&amp;#125; &amp;#123;1.1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;invoice&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;closing&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;Best regards&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;letter&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;document&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;相对应可生成的pdf文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/06/524925364.png&quot; alt=&quot;2015-06-30_184011.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;由stackexchange上的这个抱怨“&lt;a href=&quot;http://tex.stackexchange.com/questions/105824/is-there-a-latex-java-jar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Is there a LaTex java .jar?&lt;/a&gt;”来看，MikTex的安装确实是一大讨厌（当然对我来说没有这个问题）&lt;/li&gt;
&lt;li&gt;一篇研究“&lt;a href=&quot;http://www.tug.org/TUGboat/tb27-1/tb86bencze.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server side PDF generation based on LATEX templates&lt;/a&gt;”的文章，对iText、JasperReports等也都有介绍，也值得一看&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jovicazoric.com/2013/09/24/create-a-pdf-document-using-latex-and-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Create a pdf document using LaTeX and Java&lt;/a&gt;，比较没头没尾&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;JLR（Java LaTeX Report）是基于MiKTeX和Velocity模板引擎构建的可生成LaTeX的一个Java包，对Tutorial的示例进行试验和稍加改动。&lt;/p&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.stackess.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.stackess.com/tags/Java/"/>
    
      <category term="LaTeX" scheme="http://www.stackess.com/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>闭包的概念、例子和作用</title>
    <link href="http://www.stackess.com/bibao/"/>
    <id>http://www.stackess.com/bibao/</id>
    <published>2015-06-20T10:20:00.000Z</published>
    <updated>2016-04-08T17:16:37.198Z</updated>
    
    <content type="html">&lt;p&gt;作为一个Javaer，在学习Javascript和Python时老碰到的一个词——闭包。在介绍闭包的概念的基础上，文本以3个详尽的例子来分析闭包的意义和作用。主要参考了IBM的一篇文章，并以JS进行论证实验。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;code&gt;闭包&lt;/code&gt;是&lt;strong&gt;函数&lt;/strong&gt;和&lt;strong&gt;引用环境&lt;/strong&gt;组成的整体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;闭包不是函数，只是行为和函数相似，不是所有被传递的函数都需要转化为闭包，只有引用环境可能发生变化的函数才需要这样做。&lt;/li&gt;
&lt;li&gt;闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。&lt;/li&gt;
&lt;li&gt;所谓引用环境是指在程序执行中的某个点所有处于活跃状态的约束所组成的集合。其中的约束是指一个变量的名字和其所代表的对象之间的联系。&lt;/li&gt;
&lt;li&gt;对象是附有行为的数据，而闭包是附有数据的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;意义&quot;&gt;&lt;a href=&quot;#意义&quot; class=&quot;headerlink&quot; title=&quot;意义&quot;&gt;&lt;/a&gt;意义&lt;/h2&gt;&lt;p&gt;为什么要把引用环境与函数组合起来？&lt;br&gt;因为在支持嵌套作用域的语言中，有时&lt;strong&gt;不能简单直接地确定函数的引用环境&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个编程语言需要哪些特性来支持闭包呢，下面列出一些比较重要的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数是一阶值（First-class value），即函数可以作为另一个函数的返回值或参数，还可以作为一个变量的值；&lt;/li&gt;
&lt;li&gt;函数可以嵌套定义，即在一个函数内部可以定义另一个函数；&lt;/li&gt;
&lt;li&gt;可以捕获引用环境，并把引用环境和函数代码组成一个可调用的实体；&lt;/li&gt;
&lt;li&gt;允许定义匿名函数；&lt;br&gt;这些条件并不是必要的，但具备这些条件能说明一个编程语言对闭包的支持较为完善。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如Javascript、Python都已一定程度支持闭包，而不支持闭包的语言如Java（8之前）。&lt;/p&gt;
&lt;h2 id=&quot;例1&quot;&gt;&lt;a href=&quot;#例1&quot; class=&quot;headerlink&quot; title=&quot;例1&quot;&gt;&lt;/a&gt;例1&lt;/h2&gt;&lt;p&gt;以Javascript实现一个简单计数，准确地来说是计数模板，这就需要一个初始为0的计数器和计数函数，计数函数作为模板函数的返回值。来自&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-closure/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;闭包的概念、形式与应用&lt;/a&gt;的例子。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;make_counter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inc_count&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count = count + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inc_count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1 = make_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 = make_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有闭包或者是新手，可能会觉得这段代码存在以下的矛盾：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;count是局部变量，作用域在make_counter()之内，调用make_counter()返回一个函数后，count应当失效&lt;/li&gt;
&lt;li&gt;make_counter()的返回值是函数inc_count()，并赋给了变量，在实际调用时执行该函数，还需要访问count&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中2正是我们的本意，需要count依旧有效。闭包的机制能使得在外部函数make_counter()返回后，内存依然保留内部函数inc_count()需要的count。如闭包实例c1，包含了函数inc_count()和相应的变量count。&lt;/p&gt;
&lt;p&gt;闭包的一个作用是可以&lt;strong&gt;模拟面向对象编程&lt;/strong&gt;。用闭包的Javascript相当于实现了这样的Java程序，计数模板产生计数函数，计数器互相独立：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Counter&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inc_count&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Counter c1=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Counter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Counter c2=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Counter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c1.inc_count();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c2.inc_count();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而改写的Javascript的面向对象写法（参考 &lt;a href=&quot;http://www.cnblogs.com/gaojun/archive/2013/10/24/3386552.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JS面向对象的程序设计&lt;/a&gt; 和 &lt;a href=&quot;http://www.iteye.com/topic/434462&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JS 中面向对象的5种写法&lt;/a&gt;）：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;make_counter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make_counter.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;: make_counter(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inc_count:function()&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; make_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; make_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1.inc_count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2.inc_count()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里特别废话一下，还有两种写法虽然看起来很舒服，但其实是有问题的：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;make_counter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.inc_count=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count=&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; make_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; make_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1.inc_count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2.inc_count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1.inc_count==c2.inc_count    &lt;span class=&quot;comment&quot;&gt;//false，对象的属性指向函数时，会重复的创建函数实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;相当于&lt;code&gt;this.inc_count=new function(){……}&lt;/code&gt;，而好的当然是令不同的对象共享函数块。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make_counter=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;count&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;inc_count&quot;&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count=count+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make_counter.inc_count()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简直不能算面向对象，让它做一个安静的美男子……&lt;/p&gt;
&lt;h2 id=&quot;例2&quot;&gt;&lt;a href=&quot;#例2&quot; class=&quot;headerlink&quot; title=&quot;例2&quot;&gt;&lt;/a&gt;例2&lt;/h2&gt;&lt;p&gt;以Javascript实现对1、2、……、9做连续运算，加法函数作为运算函数的传入参数，累加器初始为0。也是来自&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-closure/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;闭包的概念、形式与应用&lt;/a&gt;的例子。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do10times&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fn(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addsum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum = sum + i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do10times(addsum)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有闭包或者是新手，可能会觉得这段代码存在以下的矛盾：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数do10times()在变量sum之前已经定义，不在sum的作用域内，调用do10times()时不能访问sum&lt;/li&gt;
&lt;li&gt;函数addsum()作为参数传给do10times()，并在do10times()中被调用10次，需要访问变量sum&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中2正是我们的本意，需要访问sum。闭包的机制能使得在参数函数addsum()携内存中的sum一起投奔do10times()。闭包实例包含了函数addsum()和相应的变量sum。&lt;/p&gt;
&lt;p&gt;如果觉得全局变量sum不太顺眼，也就&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do10times&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fn(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calculator&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addsum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sum = sum + i    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; addsum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; calculator()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; calculator()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do10times(c1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do10times(c2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于对Javascript不太了解，不太清楚该如何改成面向对象的形式，另外在JS中&lt;code&gt;this&lt;/code&gt;指代的对象需要根据运行时此函数在什么对象上被调用判断，具体参考 &lt;a href=&quot;http://blog.csdn.net/yxpjx/article/details/5109432&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js 中的this,constrct ,prototype详解&lt;/a&gt; 和 &lt;a href=&quot;http://www.cnblogs.com/RightDear/archive/2013/08/01/3230618.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js中this的四种调用模式&lt;/a&gt;。由于本文重点并不在此，就不多加研究了。&lt;/p&gt;
&lt;h2 id=&quot;例3&quot;&gt;&lt;a href=&quot;#例3&quot; class=&quot;headerlink&quot; title=&quot;例3&quot;&gt;&lt;/a&gt;例3&lt;/h2&gt;&lt;p&gt;闭包引用循环变量时要特别注意。来自&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014186131194415d50558b7a1c424f9fb52b84dc9c965c000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰Python2.7教程&lt;/a&gt;的例子，比较两例：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i*i	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fs[i]=f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ff = count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ff[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ff[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ff[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ff[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用函数count()，循环变量i从0逐步变为4，返回4个函数f()，调用f()时访问i已是4。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;j&lt;/span&gt;)&lt;/span&gt;&amp;#123;	&lt;span class=&quot;comment&quot;&gt;//保留j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; j*j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fs[i]=g(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f1 = count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f1[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f1[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f1[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f1[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]()	&lt;span class=&quot;comment&quot;&gt;//9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用函数count()，循环变量i从0逐步变为4，且每一步都把i的值绑定给函数g的参数j，g(j)又返回f()，最终返回4个函数f()，调用f()时各自保留有不同的参数变量j。&lt;/p&gt;
&lt;p&gt;对比图如下所示。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/06/3450784186.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外还有个比较经典的例子，也是这个道理：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;//输出4,4,4,4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;j&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j)&amp;#125;(i),&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;//输出0,1,2,3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很棒的总结！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回闭包时牢记的一点就是：&lt;strong&gt;返回函数不要引用任何循环变量，或者后续会发生变化的变量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果一定要引用循环变量怎么办？&lt;strong&gt;方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-closure/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;闭包的概念、形式与应用&lt;/a&gt;一文提到了三个作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加强模块化&lt;/li&gt;
&lt;li&gt;抽象&lt;/li&gt;
&lt;li&gt;简化代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人感觉，闭包的确可以给语言增添不少活力，也可能不小心掉入坑中……&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个Javaer，在学习Javascript和Python时老碰到的一个词——闭包。在介绍闭包的概念的基础上，文本以3个详尽的例子来分析闭包的意义和作用。主要参考了IBM的一篇文章，并以JS进行论证实验。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://www.stackess.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="闭包" scheme="http://www.stackess.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="Javascript" scheme="http://www.stackess.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习笔记</title>
    <link href="http://www.stackess.com/python_note/"/>
    <id>http://www.stackess.com/python_note/</id>
    <published>2015-06-19T09:14:00.000Z</published>
    <updated>2016-04-08T16:10:45.547Z</updated>
    
    <content type="html">&lt;p&gt;学习廖雪峰的Python 2.7教程的笔记，关注Javaer觉得比较不同和值得记录的地方。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;#中间连空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;raw_input()                &lt;span class=&quot;comment&quot;&gt;#输入，以字符串的形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;r&quot;\\\t\\&quot;&lt;/span&gt;                  &lt;span class=&quot;comment&quot;&gt;#用r不转义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;多行内容，可用于注释&#39;&#39;&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;                 &lt;span class=&quot;comment&quot;&gt;#布尔值，非零数值、非空字符串、非空list等就判断为True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt;                 &lt;span class=&quot;comment&quot;&gt;#逻辑操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;                       &lt;span class=&quot;comment&quot;&gt;#空值，返回None的时候Python的交互式命令行不显示结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;%s,%d&#39;&lt;/span&gt; % (&lt;span class=&quot;string&quot;&gt;&#39;Zhang&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;#字符串格式化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;len(&lt;span class=&quot;string&quot;&gt;&#39;中&#39;&lt;/span&gt;)                  &lt;span class=&quot;comment&quot;&gt;#字符数？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int(&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)                   &lt;span class=&quot;comment&quot;&gt;#类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=a.replace(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python是动态语言（变量本身类型不固定的语言)，常量一般全部大写。&lt;/p&gt;
&lt;h3 id=&quot;编码（涨姿势）&quot;&gt;&lt;a href=&quot;#编码（涨姿势）&quot; class=&quot;headerlink&quot; title=&quot;编码（涨姿势）&quot;&gt;&lt;/a&gt;编码（涨姿势）&lt;/h3&gt;&lt;p&gt;美国 ASCII、中国 GB2312 =&amp;gt; 统一 Unicode =&amp;gt; 可变长 UTF-8（相当于UTF-8包含了ASCII）&lt;/p&gt;
&lt;p&gt;内存中统一使用Unicode编码。保存到硬盘 或者 传输的时候，就转换为UTF-8编码。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ord(&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chr(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;)                            &lt;span class=&quot;comment&quot;&gt;#字符和ASCII转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;中&#39;&lt;/span&gt;                              &lt;span class=&quot;comment&quot;&gt;#Unicode字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;中&#39;&lt;/span&gt;.encode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)              &lt;span class=&quot;comment&quot;&gt;#Unicode转换为UTF-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;u&#39;中&#39;&lt;/span&gt;.encode(&lt;span class=&quot;string&quot;&gt;&#39;gb2312&#39;&lt;/span&gt;)             &lt;span class=&quot;comment&quot;&gt;#Unicode转换为GB2312&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;\xe4\xb8\xad&#39;&lt;/span&gt;.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)     &lt;span class=&quot;comment&quot;&gt;#UTF-8转换为Unicode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 2.x版本虽然支持Unicode，但在语法上有’xxx’和u’xxx’两种字符串表示方式。&lt;br&gt;在Python 3.x版本中，把’xxx’和u’xxx’统一成Unicode编码，即写不写前缀u都是一样的，而以字节形式表示的字符串则必须加上b前缀：b’xxx’。&lt;/p&gt;
&lt;p&gt;因此&lt;code&gt;.py&lt;/code&gt;的文件头必须加上：&lt;br&gt;&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding: utf-&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; -*-&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；&lt;/p&gt;
&lt;p&gt;第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;列表-list&quot;&gt;&lt;a href=&quot;#列表-list&quot; class=&quot;headerlink&quot; title=&quot;列表 list&quot;&gt;&lt;/a&gt;列表 list&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;二&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;,[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]]    &lt;span class=&quot;comment&quot;&gt;#各种类型都可以&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;len(list)                   &lt;span class=&quot;comment&quot;&gt;#长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]                    &lt;span class=&quot;comment&quot;&gt;#索引最后一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.append(&lt;span class=&quot;string&quot;&gt;&#39;four&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.pop() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.insert(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;insert&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.pop(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.sort()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;元组-tuple&quot;&gt;&lt;a href=&quot;#元组-tuple&quot; class=&quot;headerlink&quot; title=&quot;元组 tuple&quot;&gt;&lt;/a&gt;元组 tuple&lt;/h3&gt;&lt;p&gt;相当于一旦初始化就不能修改的list&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tuple=(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;二&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;,(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;),[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;])  &lt;span class=&quot;comment&quot;&gt;#存在数学括号的歧义性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x,y=(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;二&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;字典-dict&quot;&gt;&lt;a href=&quot;#字典-dict&quot; class=&quot;headerlink&quot; title=&quot;字典 dict&quot;&gt;&lt;/a&gt;字典 dict&lt;/h3&gt;&lt;p&gt;就是Java中的map般的存在，键值对&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dict = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Zhang&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Li&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;85&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict[&lt;span class=&quot;string&quot;&gt;&#39;Wang&#39;&lt;/span&gt;]=&lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict.pop(&lt;span class=&quot;string&quot;&gt;&#39;Li&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;key的对象就不能变，如字符串、整数等&lt;br&gt;避免key不存在的错误：一是通过&lt;code&gt;in&lt;/code&gt;判断key是否存在，二是通过dict提供的&lt;code&gt;get(key)&lt;/code&gt;方法&lt;/p&gt;
&lt;h3 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h3&gt;&lt;p&gt;这Java中也有，不重复的key，且没有value&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s=set([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.remove(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;headerlink&quot; title=&quot;条件判断&quot;&gt;&lt;/a&gt;条件判断&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;else if =&amp;gt; elif&lt;br&gt;{ } =&amp;gt; 缩进&lt;br&gt;还有都要&lt;code&gt;:&lt;/code&gt;符号&lt;/p&gt;
&lt;h3 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str=&lt;span class=&quot;string&quot;&gt;&#39;helloworld&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; str[::&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]:   &lt;span class=&quot;comment&quot;&gt;#好用的切片，从头到尾，步长2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(str))[::&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index,value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(str[::&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; index,value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在 python 中，`&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; … &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;` 表示这样的意思，&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 中的语句和普通的没有区别，&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; 中的语句会在循环正常执行完（即 &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 不是通过 &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; 跳出而中断的）的情况下执行，&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; … &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; 也是一样（[W3CSCHOOL - Python &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 循环语句][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):  &lt;span class=&quot;comment&quot;&gt;#产生[0,1,2,3,4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i==&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no break&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pass&lt;/code&gt;是空语句，是为了保持程序结构的完整性。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;参数顺序为必选参数 &amp;gt; 默认参数 &amp;gt; 可变参数 &amp;gt; 关键字参数&lt;/p&gt;
&lt;p&gt;默认参数，必须指向不变对象，不能是List。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;my_abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; isinstance(x, (int, float)): &lt;span class=&quot;comment&quot;&gt;# 类型检查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;string&quot;&gt;&#39;bad operand type&#39;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x,&lt;span class=&quot;string&quot;&gt;&#39;正&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -x,&lt;span class=&quot;string&quot;&gt;&#39;负&#39;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#返回tuple&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可变参数，在函数调用时自动组装为一个tuple。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*numbers)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; numbers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sum = sum + n * n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;calc(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;calc(*nums)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关键字参数，允许你传入0个或任意个&lt;u&gt;含参数名的参数&lt;/u&gt;，这些关键字参数在函数内部自动组装为一个dict。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a, b, c=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, *args, **kw)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;a =&#39;&lt;/span&gt;, a, &lt;span class=&quot;string&quot;&gt;&#39;b =&#39;&lt;/span&gt;, b, &lt;span class=&quot;string&quot;&gt;&#39;c =&#39;&lt;/span&gt;, c, &lt;span class=&quot;string&quot;&gt;&#39;args =&#39;&lt;/span&gt;, args, &lt;span class=&quot;string&quot;&gt;&#39;kw =&#39;&lt;/span&gt;, kw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;func(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, x=&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; args = (&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;) kw = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;args = (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;kw = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;func(*args, **kw)  &lt;span class=&quot;comment&quot;&gt;#奇了个葩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; args = (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,) kw = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;个人对原文“&lt;i&gt;对于任意函数，都可以通过类似func(&lt;em&gt;args, **kw)的形式调用它，无论它的参数是如何定义的&lt;/em&gt;&lt;/i&gt;”的修改意见：定义时含有可变参数和关键字参数的函数，才可以通过类似func(args, **kw)的形式调用它。如果&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a,b,c=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并不能通过func(&lt;em&gt;args, **kw)调用。&lt;br&gt;实际上，`func(&lt;/em&gt;args, **kw)`是函数的通用形式。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h3&gt;&lt;p&gt;可对list、tuple、字符串进行切片。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;二&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;,[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list[::&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;#步长为2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;range(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)[:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;abcdefg&#39;&lt;/span&gt;[:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;迭代&quot;&gt;&lt;a href=&quot;#迭代&quot; class=&quot;headerlink&quot; title=&quot;迭代&quot;&gt;&lt;/a&gt;迭代&lt;/h3&gt;&lt;p&gt;只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Iterable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;isinstance(&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;, Iterable) &lt;span class=&quot;comment&quot;&gt;# 判断str是否可迭代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; x, y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;列表生成式&quot;&gt;&lt;a href=&quot;#列表生成式&quot; class=&quot;headerlink&quot; title=&quot;列表生成式&quot;&gt;&lt;/a&gt;列表生成式&lt;/h3&gt;&lt;p&gt;即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L=[str(k)+&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;+str(v) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k,v &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Zhang&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;&amp;#125;.iteritems()] &lt;span class=&quot;comment&quot;&gt;#注意不要声明和内置方法同名的变量或方法，比如str=&quot;123&quot;,就会导致str(123)不能用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L=[x*y &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x+y&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]         &lt;span class=&quot;comment&quot;&gt;#列表生成式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L=[x*y &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x+y&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)]  &lt;span class=&quot;comment&quot;&gt;#列表生成式还可带条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L =[&lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Apple&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;]                             &lt;span class=&quot;comment&quot;&gt;#将是str类型转换为小写，且保留非str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L= [s.lower() &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(s,str) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; L]                &lt;span class=&quot;comment&quot;&gt;#方法一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L= [s.lower() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; L &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(s,str) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; L]     &lt;span class=&quot;comment&quot;&gt;#方法二&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;补充：留言有关于列表生成式和条件表达式的讨论，个人观点&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;列表生成式&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;comprehension ::=  expression comp_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comp_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;      ::=  &lt;span class=&quot;string&quot;&gt;&quot;for&quot;&lt;/span&gt; target_list &lt;span class=&quot;string&quot;&gt;&quot;in&quot;&lt;/span&gt; or_&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; [comp_iter]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comp_iter     ::=  comp_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; | comp_&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comp_&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;       ::=  &lt;span class=&quot;string&quot;&gt;&quot;if&quot;&lt;/span&gt; expression_nocond [comp_iter]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#conditional-expressions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;条件表达式&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conditional_expression ::=  or_&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;if&quot;&lt;/span&gt; or_&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;else&quot;&lt;/span&gt; expression]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expression             ::=  conditional_expression | lambda_expr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expression_nocond      ::=  or_&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; | lambda_expr_nocond&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件表达式 | lambda表达式 + for 是列表生成式的一种形式&lt;/li&gt;
&lt;li&gt;条件表达式没有for&lt;/li&gt;
&lt;li&gt;列表生成式中的&lt;code&gt;comp_if::= &amp;quot;if&amp;quot; expression_nocond [comp_iter]&lt;/code&gt;有for，但并不是条件表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以方法一中的&lt;code&gt;s.lower() if isinstance(s,str) else s&lt;/code&gt;是条件表达式，这是列表生成器。而方法二中的&lt;code&gt;s.lower() for s in L if isinstance(s,str) else s&lt;/code&gt;不是条件表达式，&lt;code&gt;if isinstance(s,str) else s for s in L&lt;/code&gt;也不是条件表达式而符合列表生成器的&lt;code&gt;comp_if ::= &amp;quot;if&amp;quot; expression_nocond [comp_iter]&lt;/code&gt;，所以也是列表生成器。&lt;/p&gt;
&lt;h3 id=&quot;生成器&quot;&gt;&lt;a href=&quot;#生成器&quot; class=&quot;headerlink&quot; title=&quot;生成器&quot;&gt;&lt;/a&gt;生成器&lt;/h3&gt;&lt;p&gt;一边循环一边计算的机制，节省内存。可用&lt;code&gt;()&lt;/code&gt;和关键字&lt;code&gt;yield&lt;/code&gt;声明。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g = (x * x &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;g.next() &lt;span class=&quot;comment&quot;&gt;#也可迭代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(max)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n, a, b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; n &amp;lt; max:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; b     &lt;span class=&quot;comment&quot;&gt;#生成器的关键字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a, b = b, a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f=fib(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.next()            &lt;span class=&quot;comment&quot;&gt;#输出1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; n         &lt;span class=&quot;comment&quot;&gt;#输出1 2 3 5 8，跳过了第一个1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; fib(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)     &lt;span class=&quot;comment&quot;&gt;#这是一个新的生成器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; n         &lt;span class=&quot;comment&quot;&gt;#输出1 1 2 3 5 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h3&gt;&lt;p&gt;一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量（内部）。Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。&lt;br&gt;变量可以指向函数&lt;code&gt;f=str()&lt;/code&gt;，函数名也是变量&lt;code&gt;str=123&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数。高阶函数可以接受函数作为参数外，还可以把函数作为结果值返回。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传入函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接受一个函数和一个序列的函数包括&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;map(f, [x1, x2, x3, x4])     &lt;span class=&quot;comment&quot;&gt;#相当于[f(x1),f(x2),f(x3),f(x4)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reduce(f, [x1, x2, x3, x4])  &lt;span class=&quot;comment&quot;&gt;#相当于f(f(f(x1,x2),x3),x4)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter(f, [x1, x2, x3, x4])  &lt;span class=&quot;comment&quot;&gt;#如果f(x1)为True，则保留，否则丢弃&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sorted([x1, x2, x3, x4],f)   &lt;span class=&quot;comment&quot;&gt;#可根据f返回的1、0、-1排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以实现类型转换函数&lt;code&gt;int()&lt;/code&gt;为例：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;str2int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;char2num&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;#125;[s]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reduce(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x,y: x*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;+y, map(char2num, s))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;函数内可以定义函数，内部函数可以引用外部函数的参数和局部变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。每次调用都会返回一个新的函数。&lt;/p&gt;
&lt;p&gt;p.s. &lt;strong&gt;闭包&lt;/strong&gt;的知识略微复杂，为此专门另写了一篇博客&lt;a href=&quot;http://www.stackess.com/index.php/archives/88/&quot;&gt;《闭包的概念、例子和作用》&lt;/a&gt;&lt;br&gt;p.p.s 由于Python2的bug，廖博客中的代码实际需要修改，可见&lt;a href=&quot;http://www.cnblogs.com/ma6174/archive/2013/04/15/3022548.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python中的闭包&lt;/a&gt;一文，详细的探究过程来自&lt;a href=&quot;http://linluxiang.iteye.com/blog/789946&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python的闭包研究&lt;/a&gt;一文。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学习廖雪峰的Python 2.7教程的笔记，关注Javaer觉得比较不同和值得记录的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.stackess.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Python" scheme="http://www.stackess.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>大数据处理示例（下）</title>
    <link href="http://www.stackess.com/tianchi_sample_2/"/>
    <id>http://www.stackess.com/tianchi_sample_2/</id>
    <published>2015-05-29T09:19:00.000Z</published>
    <updated>2016-04-08T17:00:39.045Z</updated>
    
    <content type="html">&lt;p&gt;仍然是余额宝的申购赎回数据的预处理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Bash脚本文件的Unix格式问题&quot;&gt;&lt;a href=&quot;#Bash脚本文件的Unix格式问题&quot; class=&quot;headerlink&quot; title=&quot;Bash脚本文件的Unix格式问题&quot;&gt;&lt;/a&gt;Bash脚本文件的Unix格式问题&lt;/h2&gt;&lt;p&gt;在Windows下使用Cygwin提供的Unix环境，用Notepad++编辑Shell脚本时，总是提示碰到类似”未预期的符号 `$’do\r’’ 附近有语法错误&lt;br&gt;“。直到搜到《notepad++写shell语句时执行错误》&lt;a href=&quot;http://www.2cto.com/os/201411/350875.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;（http://www.2cto.com/os/201411/350875.html）&lt;/a&gt;，才发现原来是系统间换行符和回车符的差别&lt;a href=&quot;http://blog.chinaunix.net/uid-26404201-id-3082677.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;（http://blog.chinaunix.net/uid-26404201-id-3082677.html）&lt;/a&gt;，晕死！虽然在书上屡屡见到这个说法，自己还是第一次碰到，涨姿势……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unix系统里，每行结尾只有“&amp;lt;换行&amp;gt;”，即“\n”；Windows系统里面，每行结尾是“&amp;lt;回车&amp;gt;&amp;lt;换行&amp;gt;”，即“\r\n”；Mac系统里，每行结尾是“&amp;lt;回车&amp;gt;”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;数据处理&quot;&gt;&lt;a href=&quot;#数据处理&quot; class=&quot;headerlink&quot; title=&quot;数据处理&quot;&gt;&lt;/a&gt;数据处理&lt;/h2&gt;&lt;h3 id=&quot;得到所有的用户id&quot;&gt;&lt;a href=&quot;#得到所有的用户id&quot; class=&quot;headerlink&quot; title=&quot;得到所有的用户id&quot;&gt;&lt;/a&gt;得到所有的用户id&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ awk -F, &amp;apos;NR&amp;gt;1&amp;#123;print $1&amp;#125;&amp;apos; data/user_balance_table.csv | sort -g -u &amp;gt; user/users&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据文件data/user_balance_table.csv每行以逗号分割列项（&lt;code&gt;-F,&lt;/code&gt;），跳过第一行表头（&lt;code&gt;NR&amp;gt;1&lt;/code&gt;），输出第一列所有用户id（&lt;code&gt;print $1&lt;/code&gt;），再根据用户id的数字值大小(&lt;code&gt;-g&lt;/code&gt;）去重复（&lt;code&gt;-u&lt;/code&gt;）排序。&lt;/p&gt;
&lt;h3 id=&quot;得到所有的日期&quot;&gt;&lt;a href=&quot;#得到所有的日期&quot; class=&quot;headerlink&quot; title=&quot;得到所有的日期&quot;&gt;&lt;/a&gt;得到所有的日期&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ awk -F, &amp;apos;NR&amp;gt;1&amp;#123;print $2&amp;#125;&amp;apos; data/user_balance_table.csv | sort -u &amp;gt; date/dates&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据文件data/user_balance_table.csv每行以逗号分割列项（&lt;code&gt;-F,&lt;/code&gt;），跳过第一行表头（&lt;code&gt;NR&amp;gt;1&lt;/code&gt;），输出第二列所有日期（&lt;code&gt;print $2&lt;/code&gt;），再去重复（&lt;code&gt;-u&lt;/code&gt;）排序。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;批量得到各用户id的并按日期排序后的数据结果&quot;&gt;&lt;a href=&quot;#批量得到各用户id的并按日期排序后的数据结果&quot; class=&quot;headerlink&quot; title=&quot;批量得到各用户id的并按日期排序后的数据结果&quot;&gt;&lt;/a&gt;批量得到各用户id的并按日期排序后的数据结果&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; LINE &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `cat user/users`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;awk -F, &#39;\$1==&lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt;&amp;#123;print \$0;&amp;#125;&#39; data/user_balance_table.csv | sort -k 2 -t, &amp;gt; user/&lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt;&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$command&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;user &lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt; is done&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;逐行读取用户id（&lt;code&gt;for……&lt;/code&gt;），组合相应的命令字符串（&lt;code&gt;command……&lt;/code&gt;）并执行该命令。&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在bash脚本中是用&lt;code&gt;Esc&lt;/code&gt;下方的`符号包裹住表示执行命令&lt;/li&gt;
&lt;li&gt;\$后接变量名表示调用，字符串中如果要显示美元符号，则必须用\进行转义&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;eval command-line&lt;/code&gt;执行字符串命令。这是因为Shell会扫描两次该语句，第一次把字符串转换成命令，第二次执行命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;批量得到各日期的并按用户id排序后的数据结果&quot;&gt;&lt;a href=&quot;#批量得到各日期的并按用户id排序后的数据结果&quot; class=&quot;headerlink&quot; title=&quot;批量得到各日期的并按用户id排序后的数据结果&quot;&gt;&lt;/a&gt;批量得到各日期的并按用户id排序后的数据结果&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; LINE &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `cat date/dates`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;awk -F, &#39;\$2==&lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt;&amp;#123;print \$0;&amp;#125;&#39; data/user_balance_table.csv | sort -k 2 -t, &amp;gt; date/&lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt;&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$command&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;user &lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt; is done&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;逐行读取日期（&lt;code&gt;for……&lt;/code&gt;），组合相应的命令字符串（&lt;code&gt;command……&lt;/code&gt;）并执行该命令。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;统计各日期的所有用户的总购买量和总申购量&quot;&gt;&lt;a href=&quot;#统计各日期的所有用户的总购买量和总申购量&quot; class=&quot;headerlink&quot; title=&quot;统计各日期的所有用户的总购买量和总申购量&quot;&gt;&lt;/a&gt;统计各日期的所有用户的总购买量和总申购量&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; LINE &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `cat date/dates`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;awk -F, &#39;BEGIN&amp;#123;sum_purchase=0;sum_redeem=0;OFS=\&quot;,\&quot;&amp;#125;\$2==&lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt;&amp;#123;sum_purchase=sum_purchase+\$5;sum_redeem=sum_redeem+\$9&amp;#125;END&amp;#123;print  &lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt;,sum_purchase,sum_redeem&amp;#125;&#39; data/user_balance_table.csv &amp;gt;&amp;gt; date/sum_dates&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$command&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;date &lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt; is done&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;做出的 日期-购买量/申购量 统计图，有规律可循。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/592069027.png&quot; alt=&quot;sum.png&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;仍然是余额宝的申购赎回数据的预处理。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://www.stackess.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.stackess.com/tags/Linux/"/>
    
      <category term="Shell" scheme="http://www.stackess.com/tags/Shell/"/>
    
      <category term="大数据" scheme="http://www.stackess.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="awk" scheme="http://www.stackess.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>大数据处理示例（上）</title>
    <link href="http://www.stackess.com/tianchi_sample_1/"/>
    <id>http://www.stackess.com/tianchi_sample_1/</id>
    <published>2015-05-27T10:06:00.000Z</published>
    <updated>2016-04-08T16:59:34.438Z</updated>
    
    <content type="html">&lt;p&gt;利用Cygwin使用Linux下的数据处理工具，对余额宝的申购赎回数据进行预处理，R语言的时间序列分析。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Cygwin&quot;&gt;&lt;a href=&quot;#Cygwin&quot; class=&quot;headerlink&quot; title=&quot;Cygwin&quot;&gt;&lt;/a&gt;Cygwin&lt;/h2&gt;&lt;p&gt;处理大数据，经常使用Linux系统下的命令来处理，数据库、Excel什么的速度简直太捉急。虽然有&lt;a href=&quot;http://gnuwin32.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GnuWin32&lt;/a&gt;提供了一些可以在Windows系统下使用的Linux开源工具，但依然数量有限（比如没有sort），诸多不便。&lt;/p&gt;
&lt;p&gt;Cygwin是一个在windows平台上运行的类UNIX模拟环境，是cygnus solutions公司开发的自由软件。在&lt;a href=&quot;http://www.cygwin.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cygwin.com/&lt;/a&gt;上可以下载到32位和64位的软件安装包。国内也有很多镜像提供安装。&lt;/p&gt;
&lt;p&gt;Cygwin提供了Linux下很多的package（&lt;a href=&quot;https://cygwin.com/packages/package_list.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cygwin.com/packages/package_list.html&lt;/a&gt;）。并默认安装其中一部分，比如sed、grep、sort、awk等，用&lt;a href=&quot;https://cygwin.com/cygwin-ug-net/using-utils.html#cygcheck&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cygcheck&lt;/a&gt;命令可查看已安装的package。&lt;/p&gt;
&lt;p&gt;注意到官方的提示。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: Is there a command-line installer?&lt;/strong&gt;&lt;br&gt;A: Yes and no. The setup*.exe program understands command-line arguments which allow you to control its behavior and choose individual packages to install. While this provides some functionality similar to such tools as apt-get or yum it is not as full-featured as those packages.&lt;br&gt;The basic reason for not having a more full-featured package manager is that such a program would need full access to all of Cygwin’s POSIX functionality. That is, however, difficult to provide in a Cygwin-free environment, such as exists on first installation. Additionally, Windows does not easily allow overwriting of in-use executables so installing a new version of the Cygwin DLL while a package manager is using the DLL is problematic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说如果要安装&lt;code&gt;diff&lt;/code&gt;，你就还得用刚才的软件安装包去下载，详细过程可参看&lt;a href=&quot;https://cygwin.com/faq.html#faq.setup.what-packages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FAQ 2.12 How do I just get everything&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;数据预处理&quot;&gt;&lt;a href=&quot;#数据预处理&quot; class=&quot;headerlink&quot; title=&quot;数据预处理&quot;&gt;&lt;/a&gt;数据预处理&lt;/h2&gt;&lt;p&gt;以&lt;a href=&quot;http://tianchi.aliyun.com/competition/information.htm?spm=5176.100071.5678.2.nr61bj&amp;amp;raceId=3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;余额宝的申购赎回预测数据&lt;/a&gt;为例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;由&lt;code&gt;df&lt;/code&gt;命令，可看到Cygwin已经挂载了所有磁盘，直接用&lt;code&gt;cd&lt;/code&gt;切换目录即可。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cd  &lt;span class=&quot;string&quot;&gt;F:&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/【阿里天池大数据】/&lt;/span&gt;资金流入流出预测&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户申购赎回数据为在data/user_balance_table.csv（148M），用&lt;code&gt;grep&lt;/code&gt;命令从中抽取出用户id为1234着色查看（着色功能特别赞）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ grep &lt;span class=&quot;string&quot;&gt;&#39;^\&amp;lt;1234\&amp;gt;&#39;&lt;/span&gt; data/user_balance_table&lt;span class=&quot;selector-class&quot;&gt;.csv&lt;/span&gt; --&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;=auto&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/1451151867.png&quot; alt=&quot;2015-05-27_174826.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输出用户id为1234并按日期排序后的数据结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以用&lt;code&gt;grep&lt;/code&gt;命令抽取出能够匹配行首为完整的1234（&lt;code&gt;&amp;#39;^\&amp;lt;1234\&amp;gt;&amp;#39;&lt;/code&gt;）的行，再根据由逗号分隔（&lt;code&gt;-t,&lt;/code&gt;）的第二列进行排序。&lt;br&gt;&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;^\&amp;lt;1234\&amp;gt;&#39;&lt;/span&gt; data/user_balance_table.csv | &lt;span class=&quot;keyword&quot;&gt;sort&lt;/span&gt; -k &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; -t, &amp;gt; user1234&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以用&lt;code&gt;awk&lt;/code&gt;命令，以逗号分隔（&lt;code&gt;-F,&lt;/code&gt;）数据的各列后，输出第一列内容为1234的行，再根据由逗号分隔（&lt;code&gt;-t,&lt;/code&gt;）的第二列进行排序。&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ awk -F, &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;==1234&amp;#123;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$0&amp;#125;&lt;/span&gt;&#39; data/user_balance_table.csv | &lt;span class=&quot;keyword&quot;&gt;sort&lt;/span&gt; -k 2 -t, &amp;gt; user1234&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;more&lt;/code&gt;命令查看user1234（你试试用文本编辑器开user_balance_table.csv，卡得飞起）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/1961435553.png&quot; alt=&quot;2015-05-27_175026.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由数据的&lt;a href=&quot;http://tianchi.aliyun.com/competition/faq.htm?spm=5176.100068.5678.3.oe18FE&amp;amp;raceId=3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FAQ&lt;/a&gt;，某些用户的某些天没有数据，还需另外处理。&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;18.balance那张表不就是记录的一个用户一天的资金流动总量的情况吗？&lt;/strong&gt;&lt;br&gt;每个用户每天汇总的数据。 一个用户，一天一行，包括申购和赎回。 当余额是0，并且没有申购的时候，不记录。   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;时间序列分析&quot;&gt;&lt;a href=&quot;#时间序列分析&quot; class=&quot;headerlink&quot; title=&quot;时间序列分析&quot;&gt;&lt;/a&gt;时间序列分析&lt;/h2&gt;&lt;p&gt;用R语言对今日总购买量进行时间序列分析。&lt;br&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; setwd(&lt;span class=&quot;string&quot;&gt;&#39;F:/【阿里天池大数据】/资金流入流出预测&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;u&lt;/span&gt;&amp;lt;-&lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt;.table(&lt;span class=&quot;string&quot;&gt;&#39;user1234&#39;&lt;/span&gt;,sep=&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; uts&amp;lt;-&lt;span class=&quot;keyword&quot;&gt;ts&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;u&lt;/span&gt;[,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; plot.&lt;span class=&quot;keyword&quot;&gt;ts&lt;/span&gt;(uts)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;得到用户id为1234的时间-购买量图。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/571848489.png&quot; alt=&quot;u1234_申购.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;附赠一张余额宝的时间-收益率图，寡人心痛啊……&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/3112188590.png&quot; alt=&quot;收益率.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856896.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linux grep命令详解 - http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856896.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/dong008259/archive/2011/12/08/2281214.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linx之sort用法 - http://www.cnblogs.com/dong008259/archive/2011/12/08/2281214.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://luy.li/data/awk.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awk手册 - http://luy.li/data/awk.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://doc.datapanda.net/a-Little-Book-of-R-for-Time-Series.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;R语言时间序列初探！ - http://doc.datapanda.net/a-Little-Book-of-R-for-Time-Series.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;利用Cygwin使用Linux下的数据处理工具，对余额宝的申购赎回数据进行预处理，R语言的时间序列分析。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://www.stackess.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://www.stackess.com/tags/Linux/"/>
    
      <category term="Cygwin" scheme="http://www.stackess.com/tags/Cygwin/"/>
    
      <category term="大数据" scheme="http://www.stackess.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="awk" scheme="http://www.stackess.com/tags/awk/"/>
    
      <category term="grep" scheme="http://www.stackess.com/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>Java平台概述（下）</title>
    <link href="http://www.stackess.com/intro2java_2/"/>
    <id>http://www.stackess.com/intro2java_2/</id>
    <published>2015-05-26T10:52:00.000Z</published>
    <updated>2016-04-08T16:07:54.546Z</updated>
    
    <content type="html">&lt;p&gt;分目录、分包管理原始码与位码，版本管理(ing)&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;管理原始码与位码&quot;&gt;&lt;a href=&quot;#管理原始码与位码&quot; class=&quot;headerlink&quot; title=&quot;管理原始码与位码&quot;&gt;&lt;/a&gt;管理原始码与位码&lt;/h2&gt;&lt;h3 id=&quot;分目录管理&quot;&gt;&lt;a href=&quot;#分目录管理&quot; class=&quot;headerlink&quot; title=&quot;分目录管理&quot;&gt;&lt;/a&gt;分目录管理&lt;/h3&gt;&lt;p&gt;期望原始码都整理在一个目录src下，而位码都输出到classes目录下。同时注意到存在的问题：实际项目中有数以万计的类，如果每次都要重新将.java编译成.class，那会是非常费时的工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;(1).编辑&lt;br&gt;添加 src/Console.java 文件&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Console&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; writeLine(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加 src/Helloworld.java 文件&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Helloworld&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; args[])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;Console&lt;/span&gt;.writeLine(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2).编译&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ javac -sourcepath src &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; classes src/Helloworld.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-sourcepath&lt;/code&gt;用于向编译程序（javac）指定源文件的搜索路径，也就是原始码的位置。&lt;code&gt;-d&lt;/code&gt;指定放置生成的类文件的路径，也就是位码的位置。如果再用&lt;code&gt;-verbose&lt;/code&gt;监测，可以看到大致的过程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;源文件的搜索路径——搜索原始码&lt;/li&gt;
&lt;li&gt;类文件的搜索路径——搜索位码（包括默认和classpath）&lt;/li&gt;
&lt;li&gt;检查需要使用的各位码，如果存在且无变化则加载，如果不存在或有变化则写入&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用以下命令可以感受到第3步的差别，多加了&lt;code&gt;-cp classes&lt;/code&gt;，把位码的输出目录也加到位码的搜索路径中去，这样再次编译的时候若Console.java没有变化，就不需要写入Console.class，而可以直接使用它了。&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ javac -sourcepath src -d classes -&lt;span class=&quot;meta&quot;&gt;cp&lt;/span&gt; classes src/Helloworld.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(3).执行&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -&lt;span class=&quot;meta&quot;&gt;cp&lt;/span&gt; classes Helloworld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;分包管理&quot;&gt;&lt;a href=&quot;#分包管理&quot; class=&quot;headerlink&quot; title=&quot;分包管理&quot;&gt;&lt;/a&gt;分包管理&lt;/h3&gt;&lt;p&gt;只分目录并不够，还期望根据类的功能将原始码放置在不同目录下，另外也得考虑团队合作下类名称可能重复的问题。从实体和虚拟上，都需要分门别类地管理，&lt;code&gt;package&lt;/code&gt;就出现了。以网址（如com.stackess）命名package，可以保证唯一性。&lt;br&gt;package的管理能力在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原始码按package文件夹层级放置&lt;/li&gt;
&lt;li&gt;位码按package文件夹层级放置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package名+class名&lt;/code&gt;构成&lt;code&gt;完全吻合名称&lt;/code&gt;，这才是类的大名&lt;/li&gt;
&lt;li&gt;类或方法在包内、包间的权限管理，只有public可在包间使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当编译程序在原始码中看到一个完全吻合名称，直接去搜索这个类。但为了方便，没有包管理的类名称也是可以的，编译程序会机智地按如下顺序查找类的大名：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在同包中寻找&lt;/li&gt;
&lt;li&gt;比对&lt;code&gt;import&lt;/code&gt;声明（默认import java.lang）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;(1).编辑&lt;br&gt;添加 src/com/stackess/util/Console.java 文件&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.stackess.util;    &lt;span class=&quot;comment&quot;&gt;//包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Console&lt;/span&gt;&amp;#123;         &lt;span class=&quot;comment&quot;&gt;//声明public！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; writeLine(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加 src/com/stackess/Helloworld.java 文件&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.stackess;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Helloworld&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		com.stackess.util.Console.writeLine(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//完全吻合名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者用&lt;code&gt;import&lt;/code&gt;给 src/com/stackess/Helloworld.java 偷懒&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.stackess;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.stackess.util.Console;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Helloworld&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Console.writeLine(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//只是类名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2).编译&lt;br&gt;&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ javac -sourcepath src -d classes -&lt;span class=&quot;keyword&quot;&gt;cp&lt;/span&gt; classes src/&lt;span class=&quot;keyword&quot;&gt;com&lt;/span&gt;/stackess/Helloworld.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(3).执行&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -cp classes com&lt;span class=&quot;selector-class&quot;&gt;.stakcess&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Helloworld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;别忘了完全吻合名称才是类的大名，这样&lt;code&gt;java -cp classes/com/test Helloworld&lt;/code&gt;是错的，这可没有import给你用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;版本管理&quot;&gt;&lt;a href=&quot;#版本管理&quot; class=&quot;headerlink&quot; title=&quot;版本管理&quot;&gt;&lt;/a&gt;版本管理&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;分目录、分包管理原始码与位码，版本管理(ing)&lt;br&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.stackess.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.stackess.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java平台概述（上）</title>
    <link href="http://www.stackess.com/intro2java_1/"/>
    <id>http://www.stackess.com/intro2java_1/</id>
    <published>2015-05-25T09:14:00.000Z</published>
    <updated>2016-04-08T16:07:42.251Z</updated>
    
    <content type="html">&lt;p&gt;版本演进、Java SE、JDK配置详解。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;版本演进&quot;&gt;&lt;a href=&quot;#版本演进&quot; class=&quot;headerlink&quot; title=&quot;版本演进&quot;&gt;&lt;/a&gt;版本演进&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;开发者版本 &lt;strong&gt;JDK&lt;/strong&gt;（全名Java Development Kits）。&lt;/li&gt;
&lt;li&gt;平台版本 &lt;strong&gt;Java 2 Platform&lt;/strong&gt;，根据不同的体系架构分为三大平台：标准版&lt;strong&gt;J2SE&lt;/strong&gt;、企业&lt;strong&gt;J2EE&lt;/strong&gt;和微型版&lt;strong&gt;J2ME&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;版本号由1.5跳到&lt;strong&gt;5.0&lt;/strong&gt;，表示该版本的重要性。&lt;/li&gt;
&lt;li&gt;从版本6后，取消2这个号码，即Java Platform，J2SE、J2EE和J2ME分别更名为 &lt;strong&gt;Java SE&lt;/strong&gt;、&lt;strong&gt;Java EE&lt;/strong&gt;和&lt;strong&gt;Jave ME&lt;/strong&gt;。JDK全名改为Java SE Development Kits。&lt;/li&gt;
&lt;li&gt;Oracle并购Sun后，先后发布版本7和8。所有的&lt;a href=&quot;http://java.sun.com/都会跳转到http://www.oracle.com/technetwork/java/下。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://java.sun.com/都会跳转到http://www.oracle.com/technetwork/java/下。&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Java-SE&quot;&gt;&lt;a href=&quot;#Java-SE&quot; class=&quot;headerlink&quot; title=&quot;Java SE&quot;&gt;&lt;/a&gt;Java SE&lt;/h2&gt;&lt;p&gt;下图为&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java SE 8&lt;/a&gt;的组成概念图：&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/4243312071.png&quot; alt=&quot;java8.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java SE可分为四个主要部分：&lt;/p&gt;
&lt;h3 id=&quot;JVM（Java-Virtual-Machine）&quot;&gt;&lt;a href=&quot;#JVM（Java-Virtual-Machine）&quot; class=&quot;headerlink&quot; title=&quot;JVM（Java Virtual Machine）&quot;&gt;&lt;/a&gt;JVM（Java Virtual Machine）&lt;/h3&gt;&lt;p&gt; Java原始码（.java）编译时，并不直接编译为相依于某平台的0、1序列，而是翻译为中介格式的位码（.class）。&lt;br&gt;&lt;code&gt;Java程序只能在JVM上运行，JVM的可执行文件是位码文档(.class)&lt;/code&gt;。&lt;br&gt;不同平台安装专属该平台的JVM后，实现“编译一次，到处执行”跨平台的目的。&lt;/p&gt;
&lt;h3 id=&quot;JRE（Java-SE-Runtime-Environment）&quot;&gt;&lt;a href=&quot;#JRE（Java-SE-Runtime-Environment）&quot; class=&quot;headerlink&quot; title=&quot;JRE（Java SE Runtime Environment）&quot;&gt;&lt;/a&gt;JRE（Java SE Runtime Environment）&lt;/h3&gt;&lt;p&gt;只用于执行Java程序。&lt;br&gt;包括&lt;code&gt;JVM&lt;/code&gt;、&lt;code&gt;Java SE API&lt;/code&gt;和&lt;code&gt;部署技术&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;JDK（Java-SE-Development-Kits）&quot;&gt;&lt;a href=&quot;#JDK（Java-SE-Development-Kits）&quot; class=&quot;headerlink&quot; title=&quot;JDK（Java SE Development Kits）&quot;&gt;&lt;/a&gt;JDK（Java SE Development Kits）&lt;/h3&gt;&lt;p&gt;用于开发Java程序，包括执行。&lt;br&gt;包括&lt;code&gt;JRE&lt;/code&gt;、&lt;code&gt;工具程序&lt;/code&gt;（javac、javadoc、javap等）和&lt;code&gt;Java语言程序&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Java语言&quot;&gt;&lt;a href=&quot;#Java语言&quot; class=&quot;headerlink&quot; title=&quot;Java语言&quot;&gt;&lt;/a&gt;Java语言&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JDK配置详解&quot;&gt;&lt;a href=&quot;#JDK配置详解&quot; class=&quot;headerlink&quot; title=&quot;JDK配置详解&quot;&gt;&lt;/a&gt;JDK配置详解&lt;/h2&gt;&lt;p&gt;以jdk-8u45-windows-x64.exe为例，这是JDK 8发布以来的的第45个修正版。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/1396028414.png&quot; alt=&quot;jdk_install.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;将JDK安装在“E:\jdk1.8.0_45”，将公共JRE安装“E:\jre1.8.0_45”。现在查看JDK的文件夹：&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/369845535.png&quot; alt=&quot;jdk_file.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;开发工具&lt;/code&gt;就是用于编译程序之类的工具程序，对应着bin文件夹。&lt;br&gt;&lt;code&gt;源代码&lt;/code&gt;指的是JRE中Java SE API的原始码，对应着src.zip这个文件，而其位码则在JRE的lib\rt.jar。&lt;br&gt;&lt;code&gt;公共JRE&lt;/code&gt;是相对于JDK本身附有的Private JRE（对应着jre文件夹）而言。Private JRE主要是开发Java程序时测试之用，Public JRE可方便模拟客户端的Public JRE环境。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/4243312071.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1&lt;/a&gt;称对版本7，二者的差别是Private JRE有server和client选项（见bin文件夹），Public JRE只有client选项。执行Java客户端程序会默认使用client VM，以较少内存取得较快的启动速度，而使用server VM会花较长的启动时间及耗用较多的内存，为的是启动Java程序后可以获得较好的执行效能，通过java -server启动。&lt;br&gt;JRE的lib文件夹中放着Java SE API和部署技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过对JDK各文件的对应，进一步印证了JDK的组成：JRE、工具程序和Java语言程序。&lt;/p&gt;
&lt;p&gt;如果安装公有JRE（像个小白客户一样），会发现PATH环境变量被加了“C:\ProgramData\Oracle\Java\javapath;”，且该文件夹下有java.exe、javaw.exe和javaws.exe（C:\Windows\System32也有），因此可以直接使用java指令（启动JVM执行Java程序）。&lt;/p&gt;
&lt;p&gt;但是安装JDK意味着你要开发，肯定不能是小白，Java阵营的哲学是假设你懂得准备相关开发环境，因此装好JDK之后，该自己设定的变量或选项就要自己设定，JDK不会代劳。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;PATH&quot;&gt;&lt;a href=&quot;#PATH&quot; class=&quot;headerlink&quot; title=&quot;PATH&quot;&gt;&lt;/a&gt;PATH&lt;/h3&gt;&lt;p&gt;“命令提示符”模式中，当输入一个可执行文件&lt;code&gt;（.exe、.bat）&lt;/code&gt;，Win操作系统进行搜索：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果指定了完整路径搜索结束&lt;/li&gt;
&lt;li&gt;否则， 操作系统查找当前目录&lt;pre&gt;&lt;code&gt;* 如果找到，搜索结束
* 否则，按照PATH环境变量中设定的路径顺序，依次寻找各路径，搜索结束
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;搜索优先级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完整路径&lt;/li&gt;
&lt;li&gt;当前目录&lt;/li&gt;
&lt;li&gt;PATH环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;(1).编辑&lt;br&gt;添加E:\test\Helloworld.java文件。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Helloworld&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2).编译&lt;br&gt;使用Java的编译工具程序javac sourcefile，指定完整路径。&lt;br&gt;&lt;figure class=&quot;highlight taggerscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &quot;E:&lt;span class=&quot;symbol&quot;&gt;\j&lt;/span&gt;dk1.8.0_45&lt;span class=&quot;symbol&quot;&gt;\b&lt;/span&gt;in&lt;span class=&quot;symbol&quot;&gt;\j&lt;/span&gt;avac&quot; &quot;E:&lt;span class=&quot;symbol&quot;&gt;\t&lt;/span&gt;est&lt;span class=&quot;symbol&quot;&gt;\H&lt;/span&gt;elloworld.java&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当把“E:\Java\jdk1.8.0_45\bin\”加入PATH环境变量中，这样不论切换至哪，都可以直接使用JDK的工具程序。&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;javac &lt;span class=&quot;string&quot;&gt;&quot;E:\test\Helloworld.java&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(3).执行&lt;br&gt;在编译后生成了E:\test\Helloworld.class，执行语句为&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -cp &lt;span class=&quot;keyword&quot;&gt;E&lt;/span&gt;:\&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt; Helloworld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而不是&lt;code&gt;$ java &amp;quot;E:\test\Helloworld&amp;quot;&lt;/code&gt;，原因在于JVM搜索 .class不是用完整路径，而是用&lt;code&gt;-cp&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注：本文以完全路径撰写，相对路径可促类旁通。&lt;br&gt;■&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;CLASSPATH&quot;&gt;&lt;a href=&quot;#CLASSPATH&quot; class=&quot;headerlink&quot; title=&quot;CLASSPATH&quot;&gt;&lt;/a&gt;CLASSPATH&lt;/h3&gt;&lt;p&gt;通过CLASSPATH告诉JVM如何搜索可执行文件（.class）的路径。这就类似于通过PATH告诉Win操作系统如何搜索可执行文件（.exe、.bat）的路径。&lt;/p&gt;
&lt;p&gt;“命令提示符”模式中，当需要用到一个可执行文件&lt;code&gt;（.class）&lt;/code&gt;，JVM进行搜索：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果指定了路径（自变量-classpath或-cp），搜索结束&lt;/li&gt;
&lt;li&gt;否则， 操作系统查找当前目录&lt;pre&gt;&lt;code&gt;* 如果找到，搜索结束
* 否则，按照CLASSPATH环境变量中设定的路径顺序，依次寻找各路径，搜索结束
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;搜索优先级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指定路径（自变量-classpath或-cp）&lt;/li&gt;
&lt;li&gt;当前目录&lt;/li&gt;
&lt;li&gt;CLASSPATH环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所谓需要用到的时候，可以是执行，也可以是编译，比如编译一个类的原始码依赖于另一个现成的类的位码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;(1). 编辑&lt;br&gt;现在另外引用一个E:\test\classes\Console.class，并对E:\test\Helloworld.java进行改写。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Helloworld&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Console.writeLine(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2). 编译&lt;br&gt;如果直接&lt;u&gt;编译&lt;/u&gt;Helloworld.java的话，显然编译程序认不得 并不是 Java SE API的Console类，就需要告诉编译程序Console.class的位置是在classes目录下。用-verbose自变量，可看到过程信息。&lt;br&gt;&lt;figure class=&quot;highlight taggerscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ javac -cp E:&lt;span class=&quot;symbol&quot;&gt;\t&lt;/span&gt;est&lt;span class=&quot;symbol&quot;&gt;\c&lt;/span&gt;lasses -verbose &quot;E:&lt;span class=&quot;symbol&quot;&gt;\t&lt;/span&gt;est&lt;span class=&quot;symbol&quot;&gt;\H&lt;/span&gt;elloworld.java&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;br&gt;源文件的搜索路径：E:\test\classes&lt;br&gt;类文件的搜索路径：E:\jdk1.8.0_45\jre\lib\resoureces.jar，……，E:\test\classes&lt;br&gt;正在加载Object.class，……，E:\test\classes\Console.class&lt;br&gt;已写入E:\test\Helloworld.class&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可见，编译程序搜索并加载了Helloworld.java所需的链接库，最后写入Helloworld.class，完成编译。值得注意的是，的确使用了JDK的Private JRE。&lt;/p&gt;
&lt;p&gt;(3). 执行&lt;br&gt;执行Helloworld.class，必须指定Helloworld.class和Console.class的位置，前者在当前目录下，后者在classes目录下。&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -cp &lt;span class=&quot;keyword&quot;&gt;E&lt;/span&gt;:\&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;;&lt;span class=&quot;keyword&quot;&gt;E&lt;/span&gt;:\&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;\classes -verbose Helloworld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输出：&lt;/strong&gt;&lt;br&gt;Opened E:\jre1.8.0_45\lib\rt.jar&lt;br&gt;Loaded java.lang.Object，…… from E:\jre1.8.0_45\lib\rt.jar&lt;br&gt;Loaded Console from file:/E:/test/classes/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可见，在打开并加载了Java SE API的位码后，还加载了Console.class，实现对Helloworld.class的执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;用哪个JRE是取决于在PATH中先出现是%JRE%还是%JDK%。在PATH中找到第一个java可执行文件后，按照顺序&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前目录是否有原生链接库&lt;/li&gt;
&lt;li&gt;上一层目录是否有jre目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;来确定用哪个JRE。而我的是%JRE%在前%JDK%在后，所以用的是Public JRE。如果%JDK%在前，java命令就会用Private JRE。■&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;版本演进、Java SE、JDK配置详解。&lt;br&gt;
    
    </summary>
    
      <category term="后台开发" scheme="http://www.stackess.com/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.stackess.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>信息论入门</title>
    <link href="http://www.stackess.com/intro2info/"/>
    <id>http://www.stackess.com/intro2info/</id>
    <published>2015-05-21T10:14:00.000Z</published>
    <updated>2016-04-20T07:54:47.395Z</updated>
    
    <content type="html">&lt;p&gt;信息用来消除人们对事物的不确定性。信息量越大，不确定性减少程度越大，与信息作用大小无决定关系，因为对接收者来说，所获得的信息可能事关重大，也可能无足轻重。ing….&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;自信息&quot;&gt;&lt;a href=&quot;#自信息&quot; class=&quot;headerlink&quot; title=&quot;自信息&quot;&gt;&lt;/a&gt;自信息&lt;/h2&gt;&lt;p&gt;通过观测实际概率为$p$的事件的出现频率，可以推测实际概率，也就是得到信息。单一事件发生时所包含的信息量多寡，用$I(p)$来衡量，称为&lt;code&gt;自信息&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;$I(p)$必须具有以下属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非负：$I(p)\geq 0$&lt;/li&gt;
&lt;li&gt;如果事件必然发生，则不能从出现频率中得到信息：$I(1)=0$&lt;/li&gt;
&lt;li&gt;如果两个独立事件（联合概率是独立概率之和）出现，则可得到的总信息为各信息之和：$I(p_1\cap p_2)=I(p_1)+I(p_2)$&lt;/li&gt;
&lt;li&gt;是概率$p$的连续、单调函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从以上属性可导出，$I(p)=\log {1\over p}=-\log p$，以2为底数时单位为bit。&lt;br&gt;一个随机产生的事件所包含的自信息，只与事件发生的概率相关。事件发生的概率越低，在事件真的发生时，接收到的信息中，包含的自信息越大。这里的想法是，比较不可能发生的事情，当它发生了，会提供更多的信息。&lt;/p&gt;
&lt;p&gt;例如，抛一次硬币的得到的自信息为$I({1\over 2})=1$bit，抛n次硬币就会得到n bit的自信息。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;信息熵&quot;&gt;&lt;a href=&quot;#信息熵&quot; class=&quot;headerlink&quot; title=&quot;信息熵&quot;&gt;&lt;/a&gt;信息熵&lt;/h2&gt;&lt;p&gt;设n个独立事件，以符号$\{a_1,a_2,…,a_n\}$表示，若第i个事件发生则符号$a_i$出现，各事件的概率为$\{p_1,p_2,…,p_n\}$。&lt;/p&gt;
&lt;p&gt;现在信息源提供了N组符号（类似流），如果某组中出现$a_i$，则可得$a_i$的$-\log p_i$自信息，N组符号中$a_i$的出现概率为$Np_i$，则$a_i$的总自信息为$-(Np_i)\log p_i$，n个符号的总自信息为$I=\sum^n_{i=1}(-Np_i)\log p_i$，平均自信息为$I/N=-\sum^n_{i=1}p_i\log p_i$。注意到$\lim_{x\rightarrow 0}(-x\log(x))=0$，因此我们可以特别定义当$p_i=0时$有$-p_i\log p_i=0$。这个平均自信息也被称为&lt;code&gt;信息熵&lt;/code&gt;。信息熵为不确定性的量度。信息熵越大，不确定性越大，把它搞清楚所需的信息量也越大。&lt;/p&gt;
&lt;p&gt;正式地，假设有一组概率，即离散随机变量的概率分布$P=\{p_1,p_2,…,p_n\}$，则分布$P$的信息熵为$H(P)=-\sum^n_{i=1}p_i\log p_i$。&lt;/p&gt;
&lt;p&gt;推广到连续随机变量的概率分布$P(x)$，信息熵为$H(P)=-\int P(x)\log P(x)dx$。&lt;/p&gt;
&lt;p&gt;综上，一个概率分布$P$的熵就是它的互信息$I(p)$的期望值。&lt;/p&gt;
&lt;h2 id=&quot;联合熵&quot;&gt;&lt;a href=&quot;#联合熵&quot; class=&quot;headerlink&quot; title=&quot;联合熵&quot;&gt;&lt;/a&gt;联合熵&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;H(X,Y)=-\sum_{x\in  \mathcal{X}}\sum_{y\in  \mathcal{Y}} p(x,y)\log p(x,y)&lt;br&gt;$$&lt;/p&gt;
&lt;h2 id=&quot;条件熵&quot;&gt;&lt;a href=&quot;#条件熵&quot; class=&quot;headerlink&quot; title=&quot;条件熵&quot;&gt;&lt;/a&gt;条件熵&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;H(Y|X)=\sum_{x\in  \mathcal{X}}^n p(x)H(Y|X=x)\\&lt;br&gt;=-\sum_{x\in  \mathcal{X}} p(x)\sum_{y\in  \mathcal{Y}} p(y|x)\log p(y|x)\\&lt;br&gt;=-\sum_{x\in  \mathcal{X}}\sum_{y\in  \mathcal{Y}}p(x,y)\log p(y|x)\\&lt;br&gt;=-\sum_{x\in  \mathcal{X}}\sum_{y\in  \mathcal{Y}}p(x,y) \log \frac{p(x,y)}{p(x)}&lt;br&gt;$$&lt;/p&gt;
&lt;h2 id=&quot;互信息&quot;&gt;&lt;a href=&quot;#互信息&quot; class=&quot;headerlink&quot; title=&quot;互信息&quot;&gt;&lt;/a&gt;互信息&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;I(X;Y)=H(Y)-H(Y|X)\\&lt;br&gt;=-\sum_{x\in  \mathcal{X}}\sum_{y\in  \mathcal{Y}}p(x,y)\log \frac{p(x,y)}{p(x)p(y)}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;在决策树ID3中用到的信息增益（表示得知特征$X$的信息而是的类$Y$的信息的不确定性减少的程度）等价于训练数据集中类与特征的互信息。另外决策树C4.5用到的信息增益比则为$\frac{I(X;Y)}{H(Y)}$。&lt;/p&gt;
&lt;p&gt;联合熵、条件熵和互信息之间的关系可参见下图：&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/256px-Entropy-mutual-information-relative-entropy-relation-diagram.svg.png&quot; alt=&quot;entropy&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上基于香农熵理论（Shannon），实际信息论中还有很多别的熵定义，参见&lt;a href=&quot;https://en.wikipedia.org/wiki/Entropy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科
&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fi.muni.cz/usr/staudek/infteo/info-lec.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.fi.muni.cz/usr/staudek/infteo/info-lec.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conditional_entropy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Conditional_entropy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;信息用来消除人们对事物的不确定性。信息量越大，不确定性减少程度越大，与信息作用大小无决定关系，因为对接收者来说，所获得的信息可能事关重大，也可能无足轻重。ing….&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://www.stackess.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="信息论" scheme="http://www.stackess.com/tags/%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
    
      <category term="熵" scheme="http://www.stackess.com/tags/%E7%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>gnuplot在Java环境下的应用研究</title>
    <link href="http://www.stackess.com/gnuplot/"/>
    <id>http://www.stackess.com/gnuplot/</id>
    <published>2015-05-19T07:56:00.000Z</published>
    <updated>2016-04-08T16:06:25.587Z</updated>
    
    <content type="html">&lt;p&gt;gnuplot是一个常用的可在Linux, OS/2, MS Windows, OSX, VMS等多种平台下运行的便携的命令行形式的绘图工具。本文以绘制一个3D图象为示例，重点在探索如何在Java环境下应用gnuplot。详细的gnuplot的使用方法在我强烈推荐的参考中可以了解到。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;p&gt;下载安装gnuplot（&lt;a href=&quot;http://www.gnuplot.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gnuplot.info/&lt;/a&gt;）后，可以在“开始”的“所有程序”这看到如下目录，个个都还挺有用。本文以版本5.0为例。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/3469372963.png&quot; alt=&quot;2015-05-19_193851.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gnuplot既提供了console版本，也提供自己的GUI，以GUI起步会比较容易有个大致的印象。&lt;/li&gt;
&lt;li&gt;Demo目录下放有官方提供的所有示例，正如官方提示的，通过&lt;code&gt;gnuplot&amp;gt; load &amp;quot;all.dem&amp;quot;&lt;/code&gt;可以看到效果。另外官方网站上也有Web版（&lt;a href=&quot;http://www.gnuplot.info/screenshots/index.html#demos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gnuplot.info/screenshots/index.html#demos&lt;/a&gt;）可供浏览。&lt;/li&gt;
&lt;li&gt;gnuplot Documentaion和gnuplot Help内容是一样的，Help查询起来更方便，另外&lt;code&gt;gnuplot&amp;gt;? plot&lt;/code&gt;可直接索引到Help下的plot条目，非常好用！&lt;/li&gt;
&lt;li&gt;gnuplot FAQ是一些常见问题解答。如果我的英文浏览速度和中文浏览速度一样快，我一定会把它看完。&lt;/li&gt;
&lt;li&gt;gnuplot Quick Reference是快速查询手册，还不错。&lt;/li&gt;
&lt;li&gt;gnuplot on the Web可以打开官网。Uninstall你懂的。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一个3D示例&quot;&gt;&lt;a href=&quot;#一个3D示例&quot; class=&quot;headerlink&quot; title=&quot;一个3D示例&quot;&gt;&lt;/a&gt;一个3D示例&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;确认在官方demo目录下有一个数据文件&lt;code&gt;gnu-valley&lt;/code&gt;&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;0 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;0 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;0 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;3 &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意到，这里第一列为0、1、2、3之间各空了一行。如果没有这些空行，with line会将各数据点按顺序连成一条线。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编辑脚本&lt;code&gt;test.dem&lt;/code&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;clear&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# 清除画面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reset     &lt;span class=&quot;comment&quot;&gt;# 清空设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; terminal postscript landscape color enhanced    &lt;span class=&quot;comment&quot;&gt;# 设置输出终端为postscript，横向，彩色，enhanced模式（可使用/Symbol）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; output &lt;span class=&quot;string&quot;&gt;&quot;test.eps&quot;&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# 输出文件为test.eps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; isosamples &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# 设置绘图函数表面的等值线网格，越大网格越密，用splot sin(x)可以感觉出来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; grid     &lt;span class=&quot;comment&quot;&gt;# 显示xy平面的辅助格线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; xlabel &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;/Symbol a&amp;#125;&quot;&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# 设置x轴文字，打开enhanced模式后可输出部分特殊字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ylabel &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;/Symbol b&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; zlabel &lt;span class=&quot;string&quot;&gt;&quot;Accuracy&quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;# 向上偏移8，向右偏移7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; view &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# 设置视角，旋转x轴、z轴，缩放所有轴、z轴&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; hidden3d    &lt;span class=&quot;comment&quot;&gt;# 不透明，正反面以颜色区分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# set hidden3d  offset 0  # 版本5一些需要此句修复hidden3d的linecolor无效的bug，版本5不需要，可见http://sourceforge.net/p/gnuplot/bugs/1475/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# set zrange [0:10]    # 设置z轴范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;splot &lt;span class=&quot;string&quot;&gt;&quot;gnu-valley&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt; linecolor &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; notitle     &lt;span class=&quot;comment&quot;&gt;# 以line的形式画出3D图，蓝色对应3，无标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;说明：set view的第二个参数是绕z轴顺时针旋转的度数，遵循&lt;a href=&quot;http://baike.baidu.com/link?url=rsPF7TJbttYeoW8W3nQH5oUyP0fpDKnaFQi9zDQGAjoQce2PH142BD_8SgDug2akHh_5gXf-eZxjUp7mp-FrYq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;右手坐标系&lt;/a&gt;，旋转示意图如下。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/310506038.png&quot; alt=&quot;2015-05-20_100921.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行脚本&lt;code&gt;gnuplot&amp;gt; load &amp;quot;test.dem&amp;quot;&lt;/code&gt;，得到方便LaTex使用的&lt;code&gt;test.eps&lt;/code&gt;如下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/05/4255031512.png&quot; alt=&quot;2015-05-19_194022.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JavaPlot&quot;&gt;&lt;a href=&quot;#JavaPlot&quot; class=&quot;headerlink&quot; title=&quot;JavaPlot&quot;&gt;&lt;/a&gt;JavaPlot&lt;/h2&gt;&lt;p&gt;JavaPlot（&lt;a href=&quot;http://javaplot.panayotis.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javaplot.panayotis.com/&lt;/a&gt;）是对gnuplot的Java实现库。比之官网，在JavaPlot-0.5.0\demo\src\demo.java提供了更多的例子。&lt;/p&gt;
&lt;p&gt;对上面3D示例的模仿（不完全）：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JavaPlot p=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JavaPlot(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JavaPlot.getDebugger().setLevel(Debug.VERBOSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File file=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;E:/gnuplot/demo/gnu-valley&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FileDataSet data=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileDataSet(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DataSetPlot s=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DataSetPlot(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.addPlot(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PlotStyle stl = ((AbstractPlot) p.getPlots().get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)).getPlotStyle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stl.setStyle(Style.LINES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.plot();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Console中输出得到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt; Start of plot commands &lt;/strong&gt;&lt;br&gt;splot ‘-‘ title ‘Datafile 1’ with lines&lt;br&gt;0 0 10&lt;br&gt;0 1 10&lt;br&gt;0 2 10&lt;br&gt;e&lt;br&gt;quit&lt;br&gt;&lt;strong&gt; End of plot commands &lt;/strong&gt;&lt;br&gt;exec(D:\Program Files\gnuplot\bin\wgnuplot.exe C:\Users\ADMINI~1\AppData\Local\Temp\gnuplot_8364360726152295267.dat -persist )&lt;br&gt;&lt;strong&gt; Start of error stream &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; End of error stream &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过显示Debug信息，发现就是转换生成了个临时的gnuplot脚本，然后再执行。问题是JavaPlot错误地把空行当成了文件的结尾，导致不能得到期望的绘图。另一个gnuplot的Java实现 &lt;a href=&quot;https://github.com/mleoking/JavaGnuplotHybrid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mleoking/JavaGnuplotHybrid&lt;/a&gt; 也是基于这样的转换的，并且修复了空行的问题。gnuplot的英文、中文资料都很多，但是JavaPlot、JavaGnuplotHybrid这样的开源库资料示例想当少，遇到问题不方便解决。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此我认为那些干脆库不要用，省得还要去了解那些库中的方法对应哪些gnuplot命令，而由自己来实现&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java程序直接生成脚本再通过dos命令执行脚本，类似 &lt;code&gt;exec(wgnuplot.exe test.dat)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;Java程序直接执行dos命令，对上面3D示例的命令：&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gnuplot --persist -e &quot;clear; reset; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; terminal postscript landscape &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt; enhanced; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; output &#39;test.eps&#39;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; isosamples &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; grid; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; xlabel &#39;&amp;#123;/Symbol a&amp;#125;&#39;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ylabel &#39;&amp;#123;/Symbol b&amp;#125;&#39;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; zlabel &#39;Accuracy&#39; offset &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; view &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; hidden3d; splot &#39;gnu-valley&#39; with line linecolor &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; notitle&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，-e后跟的命令一定要以” “包住，则原命令中” “的部分要改为’ ‘。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考（强烈推荐）：&quot;&gt;&lt;a href=&quot;#参考（强烈推荐）：&quot; class=&quot;headerlink&quot; title=&quot;参考（强烈推荐）：&quot;&gt;&lt;/a&gt;参考（强烈推荐）：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnuplot.info/screenshots/index.html#demos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gnuplot demo plots - http://www.gnuplot.info/screenshots/index.html#demos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sciencenet.cn/blog-373392-535918.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gnuplot 中文教程 - http://blog.sciencenet.cn/blog-373392-535918.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://computacion1fcienciasunam.files.wordpress.com/2012/11/gnuplot-cookbook.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《gnuplot Cookbook》 - http://computacion1fcienciasunam.files.wordpress.com/2012/11/gnuplot-cookbook.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;gnuplot是一个常用的可在Linux, OS/2, MS Windows, OSX, VMS等多种平台下运行的便携的命令行形式的绘图工具。本文以绘制一个3D图象为示例，重点在探索如何在Java环境下应用gnuplot。详细的gnuplot的使用方法在我强烈推荐的参考中可以了解到。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://www.stackess.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="gnuplot" scheme="http://www.stackess.com/tags/gnuplot/"/>
    
  </entry>
  
  <entry>
    <title>Maven 和 M2Eclipse配置</title>
    <link href="http://www.stackess.com/maven/"/>
    <id>http://www.stackess.com/maven/</id>
    <published>2015-04-18T11:25:00.000Z</published>
    <updated>2016-04-08T16:06:19.679Z</updated>
    
    <content type="html">&lt;p&gt;Maven 概述、下载配置、快速起步 和 M2Eclipse配置&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Maven-概述&quot;&gt;&lt;a href=&quot;#Maven-概述&quot; class=&quot;headerlink&quot; title=&quot;Maven 概述&quot;&gt;&lt;/a&gt;Maven 概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Maven是用于Java的自动化构建工具，包括从清理、编译、测试到生成报告，再到打包和部署&lt;/li&gt;
&lt;li&gt;同时Maven也对构建过程进行了标准化&lt;/li&gt;
&lt;li&gt;提供中央仓库自动下载任何流行的开源类库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Maven-下载配置&quot;&gt;&lt;a href=&quot;#Maven-下载配置&quot; class=&quot;headerlink&quot; title=&quot;Maven 下载配置&quot;&gt;&lt;/a&gt;Maven 下载配置&lt;/h2&gt;&lt;p&gt;官网下载 Maven &lt;a href=&quot;http://maven.apache.org/download.cgi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://maven.apache.org/download.cgi&lt;/a&gt;，解压到 E:\maven&lt;/p&gt;
&lt;p&gt;配置环境变量&lt;br&gt;    系统变量：C_MAVEN = E:\maven\apache-maven-3.2.5&lt;br&gt;    系统变量：path = %C_MAVEN%\bin %%&lt;/p&gt;
&lt;p&gt;要注意系统变量%JAVA_HOME%指向正确的JDK目录，否则会提示错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: JAVA_HOME not found in your environment. Please set the JAVA_HOME variable in your environment to match the location of your Java installation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令行测试&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;mvn &lt;/span&gt;-v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;修改本地仓库地址&quot;&gt;&lt;a href=&quot;#修改本地仓库地址&quot; class=&quot;headerlink&quot; title=&quot;修改本地仓库地址&quot;&gt;&lt;/a&gt;修改本地仓库地址&lt;/h2&gt;&lt;p&gt;Maven 默认将本地仓库在 %USER_HOME%/.m2/repository 文件夹（%USER_HOME%表示用户目录）下。&lt;/p&gt;
&lt;p&gt;而配置文件 %C_MAVEN%/conf/settings.xml可以&lt;strong&gt;全局范围&lt;/strong&gt;地定制Maven的行为，其中找到&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- localRepository&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; | The path to the local repository maven will use to store artifacts.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; | Default: $&amp;#123;user.home&amp;#125;/.m2/repository&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;localRepository&amp;gt;/path/to/local/repo&amp;lt;/localRepository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在后面添上 &lt;code&gt;&amp;lt;localRepository&amp;gt;E:/maven/.m2/repository&amp;lt;/localRepository&amp;gt;&lt;/code&gt;，即修改了本地仓库地址——我个人的偏好。&lt;/p&gt;
&lt;p&gt;在《Maven实战》2.7.2 提到的一条最佳实践是“复制 %C_MAVEN%/conf/settings.xml 文件到 %USER_HOME%/.m2/settings.xml”，也就是推荐&lt;strong&gt;用户范围&lt;/strong&gt;的配置，这样主要是考虑升级方便吧。&lt;/p&gt;
&lt;p&gt;个人必须喜欢同时下载源码和Javadoc，可参考&lt;a href=&quot;http://blog.csdn.net/topwqp/article/details/8902863&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maven 下载 源码和javadoc命令&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;快速起步&quot;&gt;&lt;a href=&quot;#快速起步&quot; class=&quot;headerlink&quot; title=&quot;快速起步&quot;&gt;&lt;/a&gt;快速起步&lt;/h2&gt;&lt;p&gt;可以利用 &lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-archetypes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maven archetype&lt;/a&gt; 创建项目的骨架：&lt;br&gt;&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mvn arche&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;:generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;出现很多可用的archetype（如最简单的war项目模板maven-archetype-webapp、Spring+Struts2+JPA等的AppFuse Archetype），直接回车就会选中默认项&lt;code&gt;maven-archetype-quickstart&lt;/code&gt;，再填入&lt;code&gt;groupId&lt;/code&gt;、&lt;code&gt;artifactId&lt;/code&gt;、&lt;code&gt;verstion&lt;/code&gt;和&lt;code&gt;package&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/06/909025660.png&quot; alt=&quot;4.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;会自动创建出一个Maven项目，默认地，主代码位于src/main/java目录，测试代码位于src/test/java目录，pom.xml位于项目的根目录，用于描述项目如何构建，声明项目依赖等等，未来所有的输出则会在target/目录下。&lt;/p&gt;
&lt;p&gt;在pom.xml中部分元素的意义是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;groupId&lt;/code&gt;：Maven项目隶属的实际项目名。如com.stackess.mymaven表示由cstackess.com建立的mymaven项目。不应对应项目隶属的组织或公司，因为一个组织下会有很多实际项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;artifactId&lt;/code&gt;：Maven项目名。推荐做法是以“实际项目名-Maven项目名”作为artifactId，这样寻找更方便。如mymaven-core。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;：Maveb项目所处版本，快照（SNAPSHOT）代表不稳定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaging&lt;/code&gt;：Maven项目的打包方式，默认为jar，生成形式为“artifactId-version.jar”。如mymaven-core-1.0-SNAPSHOT.jar。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入项目&lt;code&gt;cd mymaven-core&lt;/code&gt;后，就可以执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译： &lt;code&gt;mvn clean compile&lt;/code&gt;&lt;br&gt;实际执行的插件和插件目标为clean:clean、resources:resource、compiler:compile。&lt;/li&gt;
&lt;li&gt;测试：&lt;code&gt;mvn clean test&lt;/code&gt;&lt;br&gt;实际执行的插件和插件目标包括……compiler:testCompile、surfire:test。&lt;/li&gt;
&lt;li&gt;打包：&lt;code&gt;mvn clean package&lt;/code&gt;&lt;br&gt;实际执行的插件和插件目标包括……jar:jar。因为默认打包类型为jar。&lt;/li&gt;
&lt;li&gt;安装：&lt;code&gt;mvn clean install&lt;/code&gt;&lt;br&gt;实际执行的插件和插件目标包括……install:install。项目的输出jar会被安装到Maven本地仓库中，供其他项目使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实，在测试之前会先编译，在打包之前会先测试，在安装之前会先打包。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;插件-M2Eclipse-配置&quot;&gt;&lt;a href=&quot;#插件-M2Eclipse-配置&quot; class=&quot;headerlink&quot; title=&quot;插件 M2Eclipse 配置&quot;&gt;&lt;/a&gt;插件 M2Eclipse 配置&lt;/h2&gt;&lt;p&gt;下载安装好 Eclipse 的 Maven 插件 &lt;a href=&quot;http://eclipse.org/m2e/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;m2eclipse&lt;/a&gt; （Eclipse 4.4 已集成）&lt;/p&gt;
&lt;p&gt;《Maven实战》2.7.3 为保持IDE和命令行的一致，用外部的 maven。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/679791862.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;修改配置文件地址，更新本地仓库地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/2799295714.png&quot; alt=&quot;2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以导入、新建 Maven Project。创建时不要选择 Create a simple project 选项，就能使用 Maven Archetype。&lt;/p&gt;
&lt;p&gt;对任一 Maven Project 右键 &lt;code&gt;Run As&lt;/code&gt; -&amp;gt; &lt;code&gt;Maven build ...&lt;/code&gt; 可添加新的命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/1008820388.png&quot; alt=&quot;3.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;Run As&lt;/code&gt; -&amp;gt; &lt;code&gt;Maven build&lt;/code&gt; 时，会出现新的命令。在 &lt;code&gt;Run Configurations&lt;/code&gt;中可进行命令的管理。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://spring.io/guides/gs/maven/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building Java Projects with Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Maven 入门篇(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-2-405568-zhs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Maven 入门篇(下)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/quanyongan/archive/2013/04/17/3025971.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven学习 (一) 搭建Maven环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/zhaoyang/archive/2012/01/07/2315443.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven以及其Eclipse插件m2eclipse的安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blogjava.net/qileilove/articles/410980.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;m2eclipse简单使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/topwqp/article/details/8902863&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven下载源码和javadoc命令&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Maven 概述、下载配置、快速起步 和 M2Eclipse配置&lt;/p&gt;
    
    </summary>
    
      <category term="工具配置" scheme="http://www.stackess.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Maven" scheme="http://www.stackess.com/tags/Maven/"/>
    
      <category term="M2Eclipse" scheme="http://www.stackess.com/tags/M2Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>支持向量机SVM</title>
    <link href="http://www.stackess.com/svm/"/>
    <id>http://www.stackess.com/svm/</id>
    <published>2015-04-14T06:38:00.000Z</published>
    <updated>2016-04-08T16:56:29.757Z</updated>
    
    <content type="html">&lt;p&gt;支持向量机SVM学习笔记整理。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/613677762.gif&quot; alt=&quot;overview.gif&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-线性分类&quot;&gt;&lt;a href=&quot;#1-线性分类&quot; class=&quot;headerlink&quot; title=&quot;1 线性分类&quot;&gt;&lt;/a&gt;1 线性分类&lt;/h2&gt;&lt;p&gt;先假设线性可分的情形。这里我们考虑的是一个两类的分类问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据点：$x_1,x_2,\ldots,x_n$ 共 $n$ 个点，每个点表示为m维向量 $x=(x^{(1)},x^{(2)},\ldots,x^{(m)})^T$ ，&lt;/li&gt;
&lt;li&gt;线性分类器：在 $R^m$ 中找到一个超平面（hyperplane）将数据点分为两类&lt;/li&gt;
&lt;li&gt;类别：表示为 $y$，取 +1 或者 -1 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$R^m$ 的&lt;code&gt;超平面&lt;/code&gt;表示为&lt;br&gt;$$&lt;br&gt;\begin{equation} \langle  w,x \rangle +b=w^Tx+b=0\end{equation}&lt;br&gt;$$&lt;br&gt;其中向量 $w=(w^{(1)},w^{(2)},\ldots,w^{(m)})^T$，$\langlew,x\rangle$ 为向量内积，$w^Tx$ 则是从矩阵角度看，且有 $w^Tw=|w|^2$ 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;回忆起高中的数学知识，二维空间中这样的超平面就是任一直线，表示为$Ax+By+C=0$。因此 $m$ 维空间中的超平面为 $w^Tx+b=w^{(1)}x^{(1)}+w^{(2)}x^{(2)}+\ldots+w^{(m)}x^{(m)}+b=0$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;分类函数&lt;/code&gt;定义为&lt;br&gt;$$\begin{equation}f(x)=w^Tx+b\end{equation}$$&lt;br&gt;则在超平面上的 $x$ 有 $f(x)=0$，其余则 $f(x)&amp;gt;0$ 或 $f(x)&amp;lt;0$。&lt;/p&gt;
&lt;p&gt;线性分类器对超平面的挑选标准是令数据点和超平面间的margin越大越好，这样confidence就越高。 确定超平面后，对一个数据点 $x$ 进行分类，实际上是通过把 $x$ 带入到分类函数 $f(x)=w^Tx+b$ 算出结果然后根据其正负号来进行类别划分的。&lt;/p&gt;
&lt;h3 id=&quot;1-1-magrin&quot;&gt;&lt;a href=&quot;#1-1-magrin&quot; class=&quot;headerlink&quot; title=&quot;1.1 magrin&quot;&gt;&lt;/a&gt;1.1 magrin&lt;/h3&gt;&lt;p&gt;需要考虑两种 magrin。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;functional margin&lt;/code&gt;&lt;br&gt;$$\begin{equation}\hat{\gamma}=yf(x)=y(w^Tx+b)\end{equation}$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从刚才 $f(x)=0$，$f(x)&amp;gt;0$ 和 $f(x)&amp;lt;=0$ 的三种情况，容易想到 $f(x)$ 的值可以衡量 $x$ 到超平面的margin。并乘上对应的类别 $y$ 值（+1或-1）来消除正负号的影响，使得functional margin $\hat{\gamma}$ 恒为正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 但是，通过等比例地缩放 $w$ 和 $b$ 的值，可使得超平面 $w^Tx+b=0$ 不变，但 $f(x)=w^Tx+b$ 的值任意大，令实际距离不变的数据点和超平面间的 functional margin $\hat{\gamma}$ 也任意大，岂不是这样就最大化 functional margin了？因此以 functional margin 作为衡量标准并不合理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;geometrical margin&lt;/code&gt;&lt;br&gt;$$\begin{equation}\tilde{\gamma} = \frac{yf(x)}{|w|}= \frac{\hat{\gamma}}{|w|}\end{equation}$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;证明：&lt;/strong&gt;&lt;br&gt; 对于一个点 $x$ ，令其垂直投影到超平面上的对应的点为 $x_0$，$f(x_0)=0$，$w$ 是垂直于超平面的一个向量（因为设超平面上任意两点 $x_1$ 和 $x_2$，则 $w^Tx_1+b=0$，$w^Tx_2+b=0$，两式相减得 $w^T(x_1-x_2)=0$，即 $w$ 向量和超平面互相垂直），$\tilde{\gamma}$ 为 $x$ 到超平面的几何距离，依然用 $y$ 来保持非负性。因此有&lt;br&gt; $$\tilde{\gamma}\frac{w}{|w|}=y(x-x_0)$$&lt;br&gt; 整理得 $x=x_0+\frac{\tilde{\gamma}}{y}\frac{w}{|w|}$，代入 $f(x)$ 得&lt;br&gt; $$f(x)=f(x_0+\frac{\tilde{\gamma}}{y}\frac{w}{|w|})=w^T(x_0+\frac{\tilde{\gamma}}{y}\frac{w}{|w|})+b=(w^Tx_0+b)+\frac{\tilde{\gamma}}{y}\frac{w^Tw}{|w|}=\frac{\tilde{\gamma}}{y}|w|$$&lt;br&gt; 即$$\tilde{\gamma}=\frac{yf(x)}{|w|}$$&lt;br&gt; &lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/1048240534.png&quot; alt=&quot;1428654312514.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;高中数学又立功了！二维空间中点 $P(x_0,y_0)$ 到直线 $Ax+By+C=0$ 的距离公式为 $d=\frac{|Ax_0+By_0+C|}{\sqrt{A^2+B^2}}$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然，functional margin 和 geometrical margin 相差一个 $|w|$ 的缩放因子。由于 geometrical margin 多了 $|w|$ 这个分母，所以同比例缩放 $w$ 和 $b$ 的时候，超平面不会变， 数据点和超平面间的 geometrical margin $\tilde{\gamma}=\frac{y(w^Tx+b)}{|w|}$ 的值也不会变。因此，最大化 geometrical margin 才是我们真正想要的。&lt;/p&gt;
&lt;p&gt;那废话这么多，为什么要介绍functional margin？因为它可以简化优化问题！&lt;/p&gt;
&lt;h3 id=&quot;1-2-优化问题&quot;&gt;&lt;a href=&quot;#1-2-优化问题&quot; class=&quot;headerlink&quot; title=&quot;1.2 优化问题&quot;&gt;&lt;/a&gt;1.2 优化问题&lt;/h3&gt;&lt;p&gt;实际上，在超平面（以下开始称为&lt;code&gt;分割面&lt;/code&gt;）两边存在着gap，它的边界是另外两个平行的超平面，为了区别，我称它俩为&lt;code&gt;支持面&lt;/code&gt;。两个支持面到分割面的距离相等，这个距离就是所能得到的最大的 geometrical margin $\tilde{\gamma}$ ，它是gap的一半。而必然有一些点“支持”这两个支持面（否则就可以进一步地扩充 gap ，这就不是最大的 margin 了），我称这些点为&lt;code&gt;支持点&lt;/code&gt;。点可以表示为以原点为起始点的向量，因此也叫做 &lt;code&gt;support vector&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/2067743219.png&quot; alt=&quot;1428670521444.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;最大间隔分类器（maximum margin classifier）的目标函数可以定义为：&lt;br&gt;$$&lt;br&gt;\max\tilde{\gamma}=\max\frac{\hat{\gamma}}{|w|} \&lt;br&gt;s.t.\hat{\gamma_i}\geq \hat{\gamma},\quad i=1,2,\ldots,n\&lt;br&gt;$$&lt;br&gt;其中不等式约束 $\hat{\gamma_i}\geq \hat{\gamma}$ 来自于 $\hat{\gamma}=\min \hat{\gamma}_i $，指的是 $n$ 个数据点到分割面的 functional margin 要大于支持面到分割面的 functional margin，因为显然所有点都在支持面“身后”。&lt;/p&gt;
&lt;p&gt;这个优化问题还可以进一步简化。前面说过，可以通过等比例地缩放 $w$ 和 $b$ 的值，使得超平面不变，而 functional margin $\hat{\gamma}$ 任意变化。因此可以为所有的 $\hat{\gamma_i}$ 挑一个基准 $w$ 和 $b$ ，刚好令 $\hat{\gamma}=\min \hat{\gamma}_i=y(w^Tx+b)=1$，问题就简化为：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\max \frac{1}{|w|} \\&lt;br&gt;s.t.  &amp;amp;y_i(w^Tx_i+b)\geq 1,\quad i=1,2,\ldots,n\\&lt;br&gt;\end{array}\end{equation}$$&lt;/p&gt;
&lt;p&gt; 而求 $\max \frac{1}{|w|}$ 也就是求 $\min |w|$。其实后面会有对 $w$ 的求导，且有 $w^Tw=|w|^2$， 因此等价求 $\min \frac{1}{2}|w|^2$ 实际上为 Lagrangian 对偶做好了铺垫。&lt;/p&gt;
&lt;p&gt;最后优化问题就简化为：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\min \frac{1}{2}|w|^2 \\&lt;br&gt;s.t.  &amp;amp;y_i(w^Tx_i+b)-1\geq 0 ,\quad i=1,2,\ldots,n\\&lt;br&gt;\end{array}\end{equation}$$&lt;/p&gt;
&lt;p&gt;因为现在的目标函数是二次的，约束条件是线性的，所以它是一个凸二次规划问题。这个问题可以用现成的QP (Quadratic Programming) 优化包进行求解。一言以蔽之：在一定的约束条件下，目标最优，损失最小。解完该优化问题，就可以获得最优的 $w^∗$，$b^∗$，确定分类函数 $f(x)={w^∗}^Tx+b$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;凸规划&lt;/code&gt;：求凸函数在凸集上的极小点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;凸规划的局部极小点就是全局极小点，且极小点的集合是凸集。&lt;/li&gt;
&lt;li&gt;如果凸规划的目标函数是严格凸函数，又存在极小点，那么它的极小点是唯一的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;二次规划&lt;/code&gt;：是非线性规划中一种特殊情况，目标函数是二次实函数，约束是线性的。&lt;/p&gt;
&lt;p&gt;提供了解决&lt;a href=&quot;http://en.wikipedia.org/wiki/Quadratic\_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二次规划&lt;/a&gt;问题的包的包括Excel、Matlab、R、SAS等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-Lagrangian对偶&quot;&gt;&lt;a href=&quot;#2-Lagrangian对偶&quot; class=&quot;headerlink&quot; title=&quot;2 Lagrangian对偶&quot;&gt;&lt;/a&gt;2 Lagrangian对偶&lt;/h2&gt;&lt;p&gt;注意到目标函数的特殊结构，还可以通过拉格朗日对偶性（Lagrange Duality）变换到对偶变量 (dual variable) 的优化问题，即通过求解与 primal problem（原问题）等价的 dual problem （对偶问题）得到 primal problem 的最优解，这就是线性可分条件下支持向量机的对偶算法，这样做的优点在于：一者对偶问题往往更容易求解；二者可以自然的引入核函数，进而推广到非线性分类问题。&lt;/p&gt;
&lt;p&gt;Lagrangian如下：&lt;br&gt;$$\begin{equation}&lt;br&gt;\mathcal{L}(w,b,\alpha)=\frac{1}{2}|w|^2-\sum_{i=1}^n\alpha_i \left(y_i(w^Tx_i+b)-1\right)&lt;br&gt;\end{equation}$$&lt;br&gt;则&lt;br&gt;$$ \begin{equation}&lt;br&gt;\min_{w,b} \max_{\alpha_i\geq 0} \mathcal{L}(w,b,\alpha)\\ \text{等价于}\min_{y_i(w^Tx_i+b)-1\geq 0} \frac{1}{2}|w|^2&lt;br&gt;\end{equation}$$&lt;br&gt;它们被称为&lt;code&gt;primal problem&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;证明：&lt;/strong&gt;&lt;br&gt;对内层的优化问题 $z(w)=$&lt;br&gt;\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\max \mathcal{L}(w,b,\alpha) \\&lt;br&gt;s.t.  &amp;amp;\alpha_i\geq 0 ,\quad i=1,2,\ldots,n\\&lt;br&gt;\end{array}&lt;br&gt;可分为两种情况讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当所有数据点都满足 $y_i(w^Tx_i+b)-1\geq 0$ 的约束时，支持点始终取到 $0$，非支持点大于 $0$，而要达到 $\mathcal{L}(w,b,\alpha)$ 的最大值，则非支持点对应的 $\alpha_i=0$，从而达到最大值，即 $\frac{1}{2}|w|^2$。&lt;/li&gt;
&lt;li&gt;当存在数据点 $y_i(w^Tx_i+b)-1\leq 0$ 时，$\mathcal{L}(w,b,\alpha)$ 的最大值可通过 $\alpha_i\rightarrow+\infty$ 趋近于无穷大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此求 $\min_{w,b}z(w)$ 时，满足约束的第一种情况就等价于求 $\min_{y_i(w^Tx_i+b)-1\geq 0} \frac{1}{2}|w|^2$，而不满足约束的第二种情况，对无穷大求最小值，自然不会是所要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与之对应的是&lt;code&gt;daul problem&lt;/code&gt;：&lt;br&gt;$$\begin{equation}\max_{\alpha_i\geq 0} \min_{w,b} \mathcal{L}(w,b,\alpha)\end{equation}$$&lt;/p&gt;
&lt;p&gt;记 primal problem 的最小值记为 $p^∗$ ，dual problem 的最大值为 $d^∗$，则&lt;strong&gt;对于所有的优化问题&lt;/strong&gt;都有&lt;code&gt;weak duality&lt;/code&gt;性质：&lt;br&gt;$$\begin{equation}d^∗\leq p^∗\end{equation}$$&lt;br&gt;而当&lt;strong&gt;某些特殊条件&lt;/strong&gt;满足时，有&lt;code&gt;strong duality&lt;/code&gt;性质：&lt;br&gt;$$\begin{equation}d^∗= p^∗\end{equation}$$&lt;br&gt;比如 凸规划+&lt;code&gt;KKT条件&lt;/code&gt; 或 凸规划+&lt;code&gt;Slater条件&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;primal problem 满足，因此 strong duality 性质成立。优化问题由 primal problem 转换为求解 daul problem $\max_{\alpha_i\geq 0} \min_{w,b} \mathcal{L}(w,b,\alpha)$。&lt;/p&gt;
&lt;p&gt;对内层 $\min_{w,b} \mathcal{L}(w,b,\alpha)$ 的求解可通过：&lt;br&gt;$$\begin{align}&lt;br&gt;\frac{\partial \mathcal{L}}{\partial w}=0 &amp;amp;\Rightarrow w=\sum_{i=1}^n \alpha_i y_i x_i \\&lt;br&gt;\frac{\partial \mathcal{L}}{\partial b} = 0 &amp;amp;\Rightarrow \sum_{i=1}^n \alpha_i y_i = 0&lt;br&gt;\end{align}$$&lt;br&gt;代回得&lt;br&gt;$$\begin{equation}&lt;br&gt;\min_{w,b} \mathcal{L}(w,b,\alpha)=\sum_{i=1}^n \alpha_i-\frac{1}{2}\sum_{i,j=1}^n \alpha_i\alpha_j y_iy_j x_i^Tx_j&lt;br&gt;\end{equation}$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;证明：&lt;/strong&gt;&lt;br&gt;$$\begin{array}{*{20}{lr}}&lt;br&gt;\frac{1}{2}|w|^2-\sum_{i=1}^n\alpha_i \left(y_i(w^Tx_i+b)-1\right)&amp;amp;\\&lt;br&gt;=\frac{1}{2}w^Tw-\sum_{i=1}^n\alpha_i \left(y_i(w^Tx_i+b)-1\right)&lt;br&gt;&amp;amp;(w^Tw=|w|^2)\\&lt;br&gt;=\frac{1}{2}w^T\sum_{i=1}^n \alpha_i y_i x_i-w^T\sum_{i=1}^n \alpha_i y_i x_i-\sum_{i=1}^n \alpha_i y_ib+\sum_{i=1}^n \alpha_i&lt;br&gt;&amp;amp;(代入w)\\&lt;br&gt;=\sum_{i=1}^n \alpha_i-\frac{1}{2}w^T\sum_{i=1}^n \alpha_i y_i x_i&lt;br&gt;&amp;amp;(\sum_{i=1}^n \alpha_i y_i = 0 )\\&lt;br&gt;=\sum_{i=1}^n \alpha_i-\frac{1}{2}\left(\sum_{i=1}^n \alpha_i y_i x_i\right)^T\sum_{i=1}^n \alpha_i y_i x_i&lt;br&gt;&amp;amp;(代入w^T)\\&lt;br&gt;=\sum_{i=1}^n \alpha_i-\frac{1}{2}\sum_{i=1}^n \alpha_i y_i x_i^T\sum_{i=1}^n \alpha_i y_i x_i&lt;br&gt;&amp;amp;\\&lt;br&gt;=\sum_{i=1}^n \alpha_i-\frac{1}{2}\sum_{i,j=1}^n \alpha_i\alpha_j y_iy_j x_i^Tx_j&lt;br&gt;&amp;amp;(\sum_i a_i\sum_j b_j=\sum_{i,j} a_ib_j)&lt;br&gt;\end{array} $$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即 $\max_{\alpha_i\geq 0} \min_{w,b} \mathcal{L}(w,b,\alpha)$ 简化为：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\max \sum_{i=1}^n\alpha_i – \frac{1}{2}\sum_{i,j=1}^n\alpha_i\alpha_jy_iy_jx_i^Tx_j  \\&lt;br&gt;s.t., &amp;amp;\alpha_i\geq 0, i=1,\ldots,n \\&lt;br&gt;&amp;amp;\sum_{i=1}^n\alpha_iy_i = 0&lt;br&gt;\end{array}\end{equation}$$&lt;/p&gt;
&lt;p&gt;也将 $w=\sum_{i=1}^n \alpha_i y_i x_i$ 代入分类函数中&lt;br&gt;$$\begin{equation}&lt;br&gt;f(x)= w^Tx+b=\left(\sum_{i=1}^n\alpha_i y_i x_i\right)^Tx+b&lt;br&gt; = \sum_{i=1}^n\alpha_i y_i  x_i^T x + b&lt;br&gt;\end{equation}$$&lt;/p&gt;
&lt;p&gt;最后，用&lt;code&gt;向量内积&lt;/code&gt;形式 $\langle x_i, x\rangle$ 替换 $x_i^Tx$。&lt;br&gt;优化问题：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\max \sum_{i=1}^n\alpha_i – \frac{1}{2}\sum_{i,j=1}^n\alpha_i\alpha_jy_iy_j \langle x_i, x_j\rangle   \\&lt;br&gt;s.t., &amp;amp;\alpha_i\geq 0, i=1,\ldots,n \\&lt;br&gt;&amp;amp;\sum_{i=1}^n\alpha_iy_i = 0&lt;br&gt;\end{array}\end{equation}$$&lt;br&gt;分类函数：&lt;br&gt;$$\begin{equation}&lt;br&gt;f(x)=\sum_{i=1}^n\alpha_i y_i \langle x_i, x\rangle + b&lt;br&gt;\end{equation}$$&lt;/p&gt;
&lt;p&gt;转换为内积带来以下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于新点 $x$ 的预测，只需要计算它与训练数据点的内积即可。&lt;/li&gt;
&lt;li&gt;内积可以使用 Kernel 函数进行非线性推广。&lt;/li&gt;
&lt;li&gt;非支持点对应的 $\alpha_i=0$ ，则新点的内积计算实际上只要针对少量的支持点，而不是所有的训练数据点。这就体现了 “Supporting Vector”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过解优化问题（如 SMO 算法），得到 $\alpha_i^∗$，代入得 $w^∗=\sum_{i=1}^n \alpha_i^∗ y_i x_i$，$b^∗=-\frac{\max_{y_i=-1}{w^∗}^Tx_i+\min_{y_i=1}{w^∗}^Tx_i}{2}$。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-非线性扩展&quot;&gt;&lt;a href=&quot;#3-非线性扩展&quot; class=&quot;headerlink&quot; title=&quot;3 非线性扩展&quot;&gt;&lt;/a&gt;3 非线性扩展&lt;/h2&gt;&lt;h3 id=&quot;3-1-映射&quot;&gt;&lt;a href=&quot;#3-1-映射&quot; class=&quot;headerlink&quot; title=&quot;3.1 映射&quot;&gt;&lt;/a&gt;3.1 映射&lt;/h3&gt;&lt;p&gt;前面介绍了线性情况下的支持向量机，它通过寻找一个线性的超平面来达到对数据进行分类的目的。不过，由于是线性方法，所以对非线性的数据就没有办法处理了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/2820125685.png&quot; alt=&quot;1428848645116.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过映射 $\phi(\cdot)$ 将分类函数 $f(x)=\sum_{i=1}^n\alpha_i y_i \langle x_i, x\rangle + b $ 向高维空间映射，可使得其线性可分：&lt;br&gt;$$\begin{equation} f(x) = \sum_{i=1}^n\alpha_i y_i \color{red}{\langle \phi(x_i), \phi(x)\rangle} + b\end{equation}$$&lt;/p&gt;
&lt;p&gt;其中的 $\alpha_i$通过求解 dual problem 而得：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\max_\alpha \sum_{i=1}^n\alpha_i – \frac{1}{2}\sum_{i,j=1}^n\alpha_i\alpha_jy_iy_j\color{red}{\langle \phi(x_i),\phi(x_j)\rangle} \\&lt;br&gt;s.t., &amp;amp;\alpha_i\geq 0, i=1,\ldots,n \\&lt;br&gt;&amp;amp;\sum_{i=1}^n\alpha_iy_i = 0&lt;br&gt;\end{array}\end{equation}$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;例1：&lt;/strong&gt;&lt;br&gt;$R^2$ 的点表示为 $x(\eta_1,\eta_2)^T$ ，则二次曲线可以写作：&lt;br&gt;$$a_1\eta_1 + a_2\eta_1^2 + a_3 \eta_2 + a_4\eta_2^2 + a_5\eta_1 \eta_2 + a_6 = 0$$&lt;br&gt;通过坐标映射 $\phi:(\eta_1,\eta_2)^T\rightarrow(z_1,z_2,z_3,z_4,z_5)^T$ 到 $R^5$ 中，对应点 $\phi(x)$ 的 $z_1=\eta_1$，$z_2=\eta_1^2$，$z_3=\eta_2$，$z_4=\eta_2^2$，$z_5=\eta_1 \eta_2$。那么显然，上面的方程在新的坐标系下可以写作：&lt;br&gt;$$\sum_{i=1}^5a_i z_i + a_6 = 0$$&lt;br&gt;从新的坐标 $z_i$ 角度看，这是一个超平面方程。因此， $R^2$ 中需要二次曲线分割（线性不可分）的数据点在 $R^5$ 中将可用超平面分割（线性可分）。&lt;/p&gt;
&lt;p&gt;高中数学示范， $P(x,y)$ 是圆 $x^2+(y-1)^2=4$ 上的任意一点，即满足 $x^2-2y+y^2-3=0$，通过将原来的$f(x,y)$的二次函数看作 $g(x^2,y,y^2)$ 的线性函数，就可以映射到三维空间中对应的点 $P(x^2,y,y^2)$。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接向高维映射的方法看似成功，但是问题是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射维数爆炸：在最初的例子里，我们对一个二维空间做映射，选择的新空间是原始空间的所有一阶和二阶的组合，得到了五个维度；如果原始空间是三维，那么我们会得到 19 维的新空间（验算一下？），这个数目是呈爆炸性增长的，这给 $\phi(\cdot)$ 的计算带来了非常大的困难。&lt;/li&gt;
&lt;li&gt;无穷维情况：无从计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-2-核函数&quot;&gt;&lt;a href=&quot;#3-2-核函数&quot; class=&quot;headerlink&quot; title=&quot;3.2 核函数&quot;&gt;&lt;/a&gt;3.2 核函数&lt;/h3&gt;&lt;p&gt;所以就需要 &lt;code&gt;Kernel&lt;/code&gt; 出马了。核函数能简化映射空间中的内积运算，避开了直接在高维空间中进行计算，而结果却是等价的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/3296738673.png&quot; alt=&quot;1428895104000.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;用 $\kappa(x_i,x)$ 的低维核函数代替 $\langle \phi(x_i), \phi(x)\rangle$ 的高维内积运算，使得分类函数为：&lt;/p&gt;
&lt;p&gt;$$f(x)=\sum_{i=1}^n\alpha_i y_i \color{red}{\kappa(x_i,x)} + b$$&lt;/p&gt;
&lt;p&gt;其中的 $\alpha_i$通过求解 dual problem 而得：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\max_\alpha\sum_{i=1}^n\alpha_i – \frac{1}{2}\sum_{i,j=1}^n\alpha_i\alpha_jy_iy_j\color{red}{\kappa(x_i,x_j)} \\&lt;br&gt;s.t., &amp;amp;\alpha_i\geq 0, i=1,\ldots,n \\&lt;br&gt;&amp;amp;\sum_{i=1}^n\alpha_iy_i = 0&lt;br&gt;\end{array}\end{equation}$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;例2：&lt;/strong&gt;&lt;br&gt;设 $R^2$ 有两点 $x_1 = (\eta_1,\eta_2)^T$ 和 $x_2=(\xi_1,\xi_2)^T$，通过例1的映射 $\phi(\cdot)$ 得到 $R^5$ 中的对应点 $\phi(x_1)(\eta_1,\eta_1^2,\eta_2,\eta_2^2,\eta_1\eta_2)^T$，$\phi(x_2)(\xi_1,\xi_1^2,\xi_2,\xi_2^2,\xi_1\xi_2)^T$，映射内积为&lt;br&gt;$$\langle \phi(x_1),\phi(x_2)\rangle = \eta_1\xi_1 + \eta_1^2\xi_1^2 + \eta_2\xi_2 + \eta_2^2\xi_2^2+\eta_1\eta_2\xi_1\xi_2$$&lt;br&gt;令核函数 $\kappa(x_1,x_2)=\left(\langle x_1, x_2\rangle + 1\right)^2$， 则&lt;br&gt;$$\kappa(x_1,x_2)= 2\eta_1\xi_1 + \eta_1^2\xi_1^2 + 2\eta_2\xi_2 + \eta_2^2\xi_2^2 + 2\eta_1\eta_2\xi_1\xi_2 + 1$$&lt;br&gt;与 $\langle \phi’(x_1),\phi’(x_2)\rangle $ 结果相等，其中$\phi’(x_1)(\sqrt{2}\eta_1,\eta_1^2,\sqrt{2}\eta_2,\eta_2^2,\sqrt{2}\eta_1\eta_2,1)$，$\phi’(x_2)(\sqrt{2}\xi_1,\xi_1^2,\sqrt{2}\xi_2,\xi_2^2,\sqrt{2}\xi_1\xi_2,1)$。显然 $\phi’(\cdot)$也就是把 $\phi(\cdot)$ 某几个维度线性缩放一下，然后再加上一个常数维度。&lt;/p&gt;
&lt;p&gt;当然，因为我们这里的例子非常简单，所以我可以手工构造出 $\phi(\cdot)$ 对应的核函数出来，如果对于任意一个映射，想要构造出对应的核函数就很困难了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原先需要映射到高维空间中，然后再根据内积的公式进行计算；现在可以直接在原来的低维空间中进行计算，而不需要显式地写出映射后的结果。这样就可以解决映射维度爆炸的问题，甚至是无穷维度的情况也没有问题。 &lt;/p&gt;
&lt;h3 id=&quot;3-3-几个核函数&quot;&gt;&lt;a href=&quot;#3-3-几个核函数&quot; class=&quot;headerlink&quot; title=&quot;3.3 几个核函数&quot;&gt;&lt;/a&gt;3.3 几个核函数&lt;/h3&gt;&lt;p&gt;通常人们会从一些常用的核函数中选择（根据问题和数据的不同，选择不同的参数，实际上就是得到了不同的核函数），例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多项式核 $\kappa(x_1,x_2) = \left(\langle x_1,x_2\rangle + R\right)^d$ &lt;/li&gt;
&lt;li&gt;高斯核 $\kappa(x_1,x_2) = \exp\left(-\frac{|x_1-x_2|^2}{2\sigma^2}\right)$&lt;/li&gt;
&lt;li&gt;线性核 $\kappa(x_1,x_2) = \langle x_1,x_2\rangle$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了 SVM 之外，任何将计算表示为数据点的内积的方法，都可以使用核方法进行非线性扩展。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;4-异常点&quot;&gt;&lt;a href=&quot;#4-异常点&quot; class=&quot;headerlink&quot; title=&quot;4 异常点&quot;&gt;&lt;/a&gt;4 异常点&lt;/h2&gt;&lt;p&gt;SVM 允许数据点在一定程度上偏离一下超平面。&lt;/p&gt;
&lt;p&gt;修改原来的约束条件 $y_i(w^Tx_i+b)\geq 1$ 为：&lt;br&gt;$$y_i(w^Tx_i+b)\geq 1\color{red}{-\xi_i}, \quad i=1,\ldots,n$$&lt;/p&gt;
&lt;p&gt;其中 $\xi_i\geq0$ 称为&lt;code&gt;松弛变量&lt;/code&gt; (slack variable) ，对应数据点 $x_i$ 允许偏离的 functional margin 的量。当然，如果我们运行  $\xi_i\geq0$  任意大的话，那任意的超平面都是符合条件的了。所以，我们在原来的目标函数后面加上一项，使得这些  $\xi_i\geq0$  的总和也要最小，即&lt;br&gt;$$\min \frac{1}{2}|w|^2\color{red}{+C\sum_{i=1}^n \xi_i}$$&lt;br&gt;其中 $C$ 是一个参数，用于控制目标函数中两项（“寻找 margin 最大的超平面”和“保证数据点偏差量最小”）之间的权重。注意，其中 $\xi_i$ 是需要优化的变量（之一），而 $C$ 是一个事先确定好的常量。&lt;/p&gt;
&lt;p&gt;优化问题：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\min\frac{1}{2}|w|^2 + C\sum_{i=1}^n\xi_i \\&lt;br&gt;s.t., &amp;amp; y_i(w^Tx_i+b)\geq 1-\xi_i, i=1,\ldots,n \\&lt;br&gt;&amp;amp; \xi_i \geq 0, i=1,\ldots,n&lt;br&gt;\end{array}\end{equation}$$&lt;/p&gt;
&lt;p&gt; Lagrangian：&lt;br&gt;$$\mathcal{L}(w,b,\xi,\alpha,r)=\frac{1}{2}|w|^2 + C\sum_{i=1}^n\xi_i – \sum_{i=1}^n\alpha_i \left(y_i(w^Tx_i+b)-1+\xi_i\right) – \sum_{i=1}^n r_i\xi_i$$&lt;/p&gt;
&lt;p&gt;解 $\min_{w,b,\xi}\mathcal{L}(w,b,\xi,\alpha,r)$：&lt;br&gt;$$\begin{align}&lt;br&gt;\frac{\partial \mathcal{L}}{\partial w}=0 &amp;amp;\Rightarrow w=\sum_{i=1}^n \alpha_i y_i x_i \\&lt;br&gt;\frac{\partial \mathcal{L}}{\partial b} = 0 &amp;amp;\Rightarrow \sum_{i=1}^n \alpha_i y_i = 0 \\&lt;br&gt;\frac{\partial \mathcal{L}}{\partial \xi_i} = 0 &amp;amp;\Rightarrow C-\alpha_i-r_i=0, \quad i=1,\ldots,n&lt;br&gt;\end{align}$$&lt;br&gt;注意到 $C−\alpha_i−r_i=0$ ，又有 $r_i\geq 0$ （作为 Lagrange multiplier 的条件），因此有 $\alpha_i\leq C$ 。&lt;/p&gt;
&lt;p&gt;代回依然得&lt;br&gt;$$\begin{equation}&lt;br&gt;\min_{w,b,\xi}\mathcal{L}(w,b,\xi,\alpha,r)=\sum_{i=1}^n \alpha_i-\frac{1}{2}\sum_{i,j=1}^n \alpha_i\alpha_j y_iy_j \langle x_i,x_j\rangle&lt;br&gt;\end{equation}$$&lt;/p&gt;
&lt;p&gt;即 $\max_{\alpha_i\geq 0,r_i\geq 0} \min_{w,b,\xi}\mathcal{L}(w,b,\xi,\alpha,r)$ 简化为：&lt;br&gt;$$\begin{equation}\begin{array}{*{20}{l}}&lt;br&gt;&amp;amp;\max \sum_{i=1}^n\alpha_i – \frac{1}{2}\sum_{i,j=1}^n\alpha_i\alpha_jy_iy_j\langle x_i,x_j\rangle\\&lt;br&gt;s.t., &amp;amp; 0 \leq \alpha_i \color{red}{\leq C}, i=1,\ldots,n\\&lt;br&gt;&amp;amp;\sum_{i=1}^n\alpha_iy_i = 0&lt;br&gt;\end{array}\end{equation}$$&lt;br&gt;可见，目标函数不变，只有 $\alpha_i$ 多了一个上限 $C$。而 Kernel 化的非线性形式也是一样的，只要把 $\langle x_i,x_j \rangle$ 换成 $\kappa(x_i,x_j)$ 即可。这样一来，一个完整的，可以处理线性和非线性并能容忍噪音和 outliers 的支持向量机才终于介绍完毕了。 &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;5-主要参考&quot;&gt;&lt;a href=&quot;#5-主要参考&quot; class=&quot;headerlink&quot; title=&quot;5 主要参考&quot;&gt;&lt;/a&gt;5 主要参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/v\_july\_v/article/details/7624837&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;july-支持向量机通俗导论（理解SVM的三层境界）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.pluskid.org/?page\_id=683&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pluskid-支持向量机系列&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;支持向量机SVM学习笔记整理。&lt;br&gt;&lt;img src=&quot;http://7vzozf.com1.z0.glb.clouddn.com/2015/04/613677762.gif&quot; alt=&quot;overview.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://www.stackess.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SVM" scheme="http://www.stackess.com/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>机器学习的可行性</title>
    <link href="http://www.stackess.com/ml_note/"/>
    <id>http://www.stackess.com/ml_note/</id>
    <published>2015-04-07T06:47:00.000Z</published>
    <updated>2016-04-08T16:48:25.916Z</updated>
    
    <content type="html">&lt;p&gt;笔记整理：以罐抓小球为例，推广到机器学习问题，并分为有限的H和无限的H两种情况。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文基于以下内容整理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;台大林轩田老师的开放课程-&lt;a href=&quot;https://www.coursera.org/course/ntumlone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习基石&lt;/a&gt;，其中&lt;a href=&quot;http://pan.baidu.com/s/1mgt4D3y&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;课程视频&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;参考笔记beader-&lt;a href=&quot;http://beader.me/mlnotebook/section2/is-learning-feasible.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习的可行性&lt;/a&gt;的2.1-2.3部分，包括了详细的推导细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要在于抓住脉络，即：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以罐抓小球为例，推广到机器学习问题，并分为有限的H和无限的H两种情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;以罐抓小球为例&quot;&gt;&lt;a href=&quot;#以罐抓小球为例&quot; class=&quot;headerlink&quot; title=&quot;以罐抓小球为例&quot;&gt;&lt;/a&gt;以罐抓小球为例&lt;/h2&gt;&lt;p&gt;对某一固定罐子，其中有橙色、绿色的小球，要估算其中橙色小球的比例（$u$）。可以通过抽样一部分样本，计算橙色的比例（$v$）来估算。&lt;/p&gt;
&lt;p&gt;当抽样数量$N$足够大时，$v\rightarrow u$，根据Hoeffding’s Inequality，有$P(|v-u|&amp;gt;\epsilon)\leq 2\exp(-2\epsilon^2N)$ 。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;类比到learning问题&quot;&gt;&lt;a href=&quot;#类比到learning问题&quot; class=&quot;headerlink&quot; title=&quot;类比到learning问题&quot;&gt;&lt;/a&gt;类比到learning问题&lt;/h2&gt;&lt;p&gt;对某一固定$h$，当$N$足够大且$x_n$独立同分布时，有$P[h(\vec x_n)=y_n]\rightarrow P[h(\vec x)=f(\vec x)]$。同时$P[h(\vec x_n)=y_n]$越大越好。&lt;/p&gt;
&lt;p&gt;也就是$P[h(\vec x_n)\neq y_n]\rightarrow P[h(\vec x)\neq f(\vec x)]$。两者的差距要越小越好，用一个上界可以限制。同时$P[h(\vec x_n)\neq y_n]$越小越好。&lt;/p&gt;
&lt;p&gt;再分别用 $E_{in}(h)=\frac{1}{N}\sum^N_{n=1}[h(\vec x_n)\neq y_n]$ 和 $E_{out}(h)=E_{\vec x\sim P}[h(\vec x)\neq f(\vec x)]$ 替换掉。&lt;/p&gt;
&lt;p&gt;另外，$A$还要能自由选择$h$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;综上，要令$E_{in}(h)$和$E_{out}(h)$接近，差距可以用上界控制，且$E_{in}(h)$很小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;有限的H&quot;&gt;&lt;a href=&quot;#有限的H&quot; class=&quot;headerlink&quot; title=&quot;有限的H&quot;&gt;&lt;/a&gt;有限的H&lt;/h3&gt;&lt;p&gt;$E_{in}(h)$和$E_{out}(h)$的差距会受$D$的影响。如果样本糟糕，可能令多个$h$的$|E_{in}(h)-E_{out}(h)|$偏差。&lt;/p&gt;
&lt;p&gt;$|E_{in}(h)-E_{out}(h)|&amp;gt;\epsilon \Leftrightarrow   \text{Bad Sample for } h$&lt;/p&gt;
&lt;p&gt;对有限的$H$，$N$足够大，由union bound，设$M=|H|$，使得&lt;br&gt;$$P|E_{in}(h)-E_{out}(h)|&amp;gt;\epsilon)=P(   \text{Bad Sample for } h) \leq 2M\exp(-2\epsilon^2N)$$成立，也就是用上界限制住了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，对有限的$H$，$N$足够大，成立。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;无限的H&quot;&gt;&lt;a href=&quot;#无限的H&quot; class=&quot;headerlink&quot; title=&quot;无限的H&quot;&gt;&lt;/a&gt;无限的H&lt;/h3&gt;&lt;p&gt;(1) 对无限的$H$，union bound无效，考虑替换$M$。&lt;/p&gt;
&lt;p&gt;$h$作用于$N$个样本，产生的判定结果（0或1）最多有$2^N$种，这个不能做上界。实际上，结果常常没有$2^N$种。&lt;/p&gt;
&lt;p&gt;$N$个样本的每一种结果称为一个&lt;code&gt;dichotomy&lt;/code&gt;，dichotomy集合为$H(\vec x_1,\vec x_2,\ldots,\vec x_N)$，与具体的$\vec x_1,\vec x_2,\ldots,\vec x_N$有关。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shatter&lt;/code&gt;指对$N$个样本，存在一组$\vec x_1,\vec x_2,\ldots,\vec x_N$，使得$H(\vec x_1,\vec x_2,\ldots,\vec x_N)$可以包括样本的所有情况$2^N$。也就是最多种结果=$2^N$。&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;成长函数&lt;/code&gt;表示最多有多少种结果，定义为&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;m_H(N)=max_{\vec x_1,\vec x_2,\ldots,\vec x_N\in X}|H(\vec x_1,\vec x_2,\ldots,\vec x_N)|,&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;与具体的$\vec x_1,\vec x_2,\ldots,\vec x_N$无关。&lt;code&gt;shatter&lt;/code&gt;就是$m_H(N)=2^N$。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;猜测可以用$m_H(N)$替换$M$，找$m_H(N)$的上界。&lt;/p&gt;
&lt;p&gt; 对$N$个样本，如$H$不能shatter，则$N$就是&lt;code&gt;break point&lt;/code&gt;。已知存在$k$为break point，&lt;br&gt; $$&lt;br&gt; m_H(N)\leq B(N,k)=\sum_{i=0}^{k-1}C^i_n\leq N^{k-1}.&lt;br&gt; $$&lt;/p&gt;
&lt;p&gt; &lt;code&gt;VC维&lt;/code&gt;定义为$d_{vc}=k-1$，$m_H(N)\leq N^{d_{vc}}$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改动$m_H(N)$可替换$M$。&lt;br&gt; $$&lt;br&gt; P|E_{in}(h)-E_{out}(h)|&amp;gt;\epsilon)=P(   \text{Bad Sample for } h) \leq 4(2N)^{d_{vc}} \exp(-1/8 \epsilon^2 N)&lt;br&gt; .$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，对无限的$H$，$N$足够大，且$m_H(N)$有break point时，成立。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;笔记整理：以罐抓小球为例，推广到机器学习问题，并分为有限的H和无限的H两种情况。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://www.stackess.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习基石" scheme="http://www.stackess.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%9F%B3/"/>
    
  </entry>
  
</feed>
